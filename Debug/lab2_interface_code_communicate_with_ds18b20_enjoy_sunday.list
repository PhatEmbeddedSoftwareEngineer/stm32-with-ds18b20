
lab2_interface_code_communicate_with_ds18b20_enjoy_sunday.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080027c0  080027c0  000037c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002818  08002818  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002818  08002818  00003818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002820  08002820  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002820  08002820  00003820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002824  08002824  00003824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002828  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08002884  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08002884  000041cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ef1  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000118c  00000000  00000000  00007f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00009110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000354  00000000  00000000  000095b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151e1  00000000  00000000  0000990c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f2e  00000000  00000000  0001eaed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827dc  00000000  00000000  00024a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a71f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016ac  00000000  00000000  000a723c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000a88e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027a8 	.word	0x080027a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080027a8 	.word	0x080027a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2f>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000600:	bf24      	itt	cs
 8000602:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000606:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800060a:	d90d      	bls.n	8000628 <__aeabi_d2f+0x30>
 800060c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000610:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000614:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000618:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800061c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000620:	bf08      	it	eq
 8000622:	f020 0001 	biceq.w	r0, r0, #1
 8000626:	4770      	bx	lr
 8000628:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800062c:	d121      	bne.n	8000672 <__aeabi_d2f+0x7a>
 800062e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000632:	bfbc      	itt	lt
 8000634:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000638:	4770      	bxlt	lr
 800063a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000642:	f1c2 0218 	rsb	r2, r2, #24
 8000646:	f1c2 0c20 	rsb	ip, r2, #32
 800064a:	fa10 f30c 	lsls.w	r3, r0, ip
 800064e:	fa20 f002 	lsr.w	r0, r0, r2
 8000652:	bf18      	it	ne
 8000654:	f040 0001 	orrne.w	r0, r0, #1
 8000658:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800065c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000660:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000664:	ea40 000c 	orr.w	r0, r0, ip
 8000668:	fa23 f302 	lsr.w	r3, r3, r2
 800066c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000670:	e7cc      	b.n	800060c <__aeabi_d2f+0x14>
 8000672:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000676:	d107      	bne.n	8000688 <__aeabi_d2f+0x90>
 8000678:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800067c:	bf1e      	ittt	ne
 800067e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000682:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000686:	4770      	bxne	lr
 8000688:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800068c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000690:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b96a 	b.w	8000984 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9d08      	ldr	r5, [sp, #32]
 80006ce:	460c      	mov	r4, r1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d14e      	bne.n	8000772 <__udivmoddi4+0xaa>
 80006d4:	4694      	mov	ip, r2
 80006d6:	458c      	cmp	ip, r1
 80006d8:	4686      	mov	lr, r0
 80006da:	fab2 f282 	clz	r2, r2
 80006de:	d962      	bls.n	80007a6 <__udivmoddi4+0xde>
 80006e0:	b14a      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	4091      	lsls	r1, r2
 80006e8:	fa20 f303 	lsr.w	r3, r0, r3
 80006ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80006f0:	4319      	orrs	r1, r3
 80006f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006fa:	fa1f f68c 	uxth.w	r6, ip
 80006fe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000702:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000706:	fb07 1114 	mls	r1, r7, r4, r1
 800070a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800070e:	fb04 f106 	mul.w	r1, r4, r6
 8000712:	4299      	cmp	r1, r3
 8000714:	d90a      	bls.n	800072c <__udivmoddi4+0x64>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f104 30ff 	add.w	r0, r4, #4294967295
 800071e:	f080 8112 	bcs.w	8000946 <__udivmoddi4+0x27e>
 8000722:	4299      	cmp	r1, r3
 8000724:	f240 810f 	bls.w	8000946 <__udivmoddi4+0x27e>
 8000728:	3c02      	subs	r4, #2
 800072a:	4463      	add	r3, ip
 800072c:	1a59      	subs	r1, r3, r1
 800072e:	fa1f f38e 	uxth.w	r3, lr
 8000732:	fbb1 f0f7 	udiv	r0, r1, r7
 8000736:	fb07 1110 	mls	r1, r7, r0, r1
 800073a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800073e:	fb00 f606 	mul.w	r6, r0, r6
 8000742:	429e      	cmp	r6, r3
 8000744:	d90a      	bls.n	800075c <__udivmoddi4+0x94>
 8000746:	eb1c 0303 	adds.w	r3, ip, r3
 800074a:	f100 31ff 	add.w	r1, r0, #4294967295
 800074e:	f080 80fc 	bcs.w	800094a <__udivmoddi4+0x282>
 8000752:	429e      	cmp	r6, r3
 8000754:	f240 80f9 	bls.w	800094a <__udivmoddi4+0x282>
 8000758:	4463      	add	r3, ip
 800075a:	3802      	subs	r0, #2
 800075c:	1b9b      	subs	r3, r3, r6
 800075e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000762:	2100      	movs	r1, #0
 8000764:	b11d      	cbz	r5, 800076e <__udivmoddi4+0xa6>
 8000766:	40d3      	lsrs	r3, r2
 8000768:	2200      	movs	r2, #0
 800076a:	e9c5 3200 	strd	r3, r2, [r5]
 800076e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000772:	428b      	cmp	r3, r1
 8000774:	d905      	bls.n	8000782 <__udivmoddi4+0xba>
 8000776:	b10d      	cbz	r5, 800077c <__udivmoddi4+0xb4>
 8000778:	e9c5 0100 	strd	r0, r1, [r5]
 800077c:	2100      	movs	r1, #0
 800077e:	4608      	mov	r0, r1
 8000780:	e7f5      	b.n	800076e <__udivmoddi4+0xa6>
 8000782:	fab3 f183 	clz	r1, r3
 8000786:	2900      	cmp	r1, #0
 8000788:	d146      	bne.n	8000818 <__udivmoddi4+0x150>
 800078a:	42a3      	cmp	r3, r4
 800078c:	d302      	bcc.n	8000794 <__udivmoddi4+0xcc>
 800078e:	4290      	cmp	r0, r2
 8000790:	f0c0 80f0 	bcc.w	8000974 <__udivmoddi4+0x2ac>
 8000794:	1a86      	subs	r6, r0, r2
 8000796:	eb64 0303 	sbc.w	r3, r4, r3
 800079a:	2001      	movs	r0, #1
 800079c:	2d00      	cmp	r5, #0
 800079e:	d0e6      	beq.n	800076e <__udivmoddi4+0xa6>
 80007a0:	e9c5 6300 	strd	r6, r3, [r5]
 80007a4:	e7e3      	b.n	800076e <__udivmoddi4+0xa6>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	f040 8090 	bne.w	80008cc <__udivmoddi4+0x204>
 80007ac:	eba1 040c 	sub.w	r4, r1, ip
 80007b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007b4:	fa1f f78c 	uxth.w	r7, ip
 80007b8:	2101      	movs	r1, #1
 80007ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80007be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c2:	fb08 4416 	mls	r4, r8, r6, r4
 80007c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007ca:	fb07 f006 	mul.w	r0, r7, r6
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x11c>
 80007d2:	eb1c 0303 	adds.w	r3, ip, r3
 80007d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x11a>
 80007dc:	4298      	cmp	r0, r3
 80007de:	f200 80cd 	bhi.w	800097c <__udivmoddi4+0x2b4>
 80007e2:	4626      	mov	r6, r4
 80007e4:	1a1c      	subs	r4, r3, r0
 80007e6:	fa1f f38e 	uxth.w	r3, lr
 80007ea:	fbb4 f0f8 	udiv	r0, r4, r8
 80007ee:	fb08 4410 	mls	r4, r8, r0, r4
 80007f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007f6:	fb00 f707 	mul.w	r7, r0, r7
 80007fa:	429f      	cmp	r7, r3
 80007fc:	d908      	bls.n	8000810 <__udivmoddi4+0x148>
 80007fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000802:	f100 34ff 	add.w	r4, r0, #4294967295
 8000806:	d202      	bcs.n	800080e <__udivmoddi4+0x146>
 8000808:	429f      	cmp	r7, r3
 800080a:	f200 80b0 	bhi.w	800096e <__udivmoddi4+0x2a6>
 800080e:	4620      	mov	r0, r4
 8000810:	1bdb      	subs	r3, r3, r7
 8000812:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000816:	e7a5      	b.n	8000764 <__udivmoddi4+0x9c>
 8000818:	f1c1 0620 	rsb	r6, r1, #32
 800081c:	408b      	lsls	r3, r1
 800081e:	fa22 f706 	lsr.w	r7, r2, r6
 8000822:	431f      	orrs	r7, r3
 8000824:	fa20 fc06 	lsr.w	ip, r0, r6
 8000828:	fa04 f301 	lsl.w	r3, r4, r1
 800082c:	ea43 030c 	orr.w	r3, r3, ip
 8000830:	40f4      	lsrs	r4, r6
 8000832:	fa00 f801 	lsl.w	r8, r0, r1
 8000836:	0c38      	lsrs	r0, r7, #16
 8000838:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800083c:	fbb4 fef0 	udiv	lr, r4, r0
 8000840:	fa1f fc87 	uxth.w	ip, r7
 8000844:	fb00 441e 	mls	r4, r0, lr, r4
 8000848:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800084c:	fb0e f90c 	mul.w	r9, lr, ip
 8000850:	45a1      	cmp	r9, r4
 8000852:	fa02 f201 	lsl.w	r2, r2, r1
 8000856:	d90a      	bls.n	800086e <__udivmoddi4+0x1a6>
 8000858:	193c      	adds	r4, r7, r4
 800085a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800085e:	f080 8084 	bcs.w	800096a <__udivmoddi4+0x2a2>
 8000862:	45a1      	cmp	r9, r4
 8000864:	f240 8081 	bls.w	800096a <__udivmoddi4+0x2a2>
 8000868:	f1ae 0e02 	sub.w	lr, lr, #2
 800086c:	443c      	add	r4, r7
 800086e:	eba4 0409 	sub.w	r4, r4, r9
 8000872:	fa1f f983 	uxth.w	r9, r3
 8000876:	fbb4 f3f0 	udiv	r3, r4, r0
 800087a:	fb00 4413 	mls	r4, r0, r3, r4
 800087e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000882:	fb03 fc0c 	mul.w	ip, r3, ip
 8000886:	45a4      	cmp	ip, r4
 8000888:	d907      	bls.n	800089a <__udivmoddi4+0x1d2>
 800088a:	193c      	adds	r4, r7, r4
 800088c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000890:	d267      	bcs.n	8000962 <__udivmoddi4+0x29a>
 8000892:	45a4      	cmp	ip, r4
 8000894:	d965      	bls.n	8000962 <__udivmoddi4+0x29a>
 8000896:	3b02      	subs	r3, #2
 8000898:	443c      	add	r4, r7
 800089a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800089e:	fba0 9302 	umull	r9, r3, r0, r2
 80008a2:	eba4 040c 	sub.w	r4, r4, ip
 80008a6:	429c      	cmp	r4, r3
 80008a8:	46ce      	mov	lr, r9
 80008aa:	469c      	mov	ip, r3
 80008ac:	d351      	bcc.n	8000952 <__udivmoddi4+0x28a>
 80008ae:	d04e      	beq.n	800094e <__udivmoddi4+0x286>
 80008b0:	b155      	cbz	r5, 80008c8 <__udivmoddi4+0x200>
 80008b2:	ebb8 030e 	subs.w	r3, r8, lr
 80008b6:	eb64 040c 	sbc.w	r4, r4, ip
 80008ba:	fa04 f606 	lsl.w	r6, r4, r6
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	431e      	orrs	r6, r3
 80008c2:	40cc      	lsrs	r4, r1
 80008c4:	e9c5 6400 	strd	r6, r4, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	e750      	b.n	800076e <__udivmoddi4+0xa6>
 80008cc:	f1c2 0320 	rsb	r3, r2, #32
 80008d0:	fa20 f103 	lsr.w	r1, r0, r3
 80008d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d8:	fa24 f303 	lsr.w	r3, r4, r3
 80008dc:	4094      	lsls	r4, r2
 80008de:	430c      	orrs	r4, r1
 80008e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e4:	fa00 fe02 	lsl.w	lr, r0, r2
 80008e8:	fa1f f78c 	uxth.w	r7, ip
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3110 	mls	r1, r8, r0, r3
 80008f4:	0c23      	lsrs	r3, r4, #16
 80008f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008fa:	fb00 f107 	mul.w	r1, r0, r7
 80008fe:	4299      	cmp	r1, r3
 8000900:	d908      	bls.n	8000914 <__udivmoddi4+0x24c>
 8000902:	eb1c 0303 	adds.w	r3, ip, r3
 8000906:	f100 36ff 	add.w	r6, r0, #4294967295
 800090a:	d22c      	bcs.n	8000966 <__udivmoddi4+0x29e>
 800090c:	4299      	cmp	r1, r3
 800090e:	d92a      	bls.n	8000966 <__udivmoddi4+0x29e>
 8000910:	3802      	subs	r0, #2
 8000912:	4463      	add	r3, ip
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	b2a4      	uxth	r4, r4
 8000918:	fbb3 f1f8 	udiv	r1, r3, r8
 800091c:	fb08 3311 	mls	r3, r8, r1, r3
 8000920:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000924:	fb01 f307 	mul.w	r3, r1, r7
 8000928:	42a3      	cmp	r3, r4
 800092a:	d908      	bls.n	800093e <__udivmoddi4+0x276>
 800092c:	eb1c 0404 	adds.w	r4, ip, r4
 8000930:	f101 36ff 	add.w	r6, r1, #4294967295
 8000934:	d213      	bcs.n	800095e <__udivmoddi4+0x296>
 8000936:	42a3      	cmp	r3, r4
 8000938:	d911      	bls.n	800095e <__udivmoddi4+0x296>
 800093a:	3902      	subs	r1, #2
 800093c:	4464      	add	r4, ip
 800093e:	1ae4      	subs	r4, r4, r3
 8000940:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000944:	e739      	b.n	80007ba <__udivmoddi4+0xf2>
 8000946:	4604      	mov	r4, r0
 8000948:	e6f0      	b.n	800072c <__udivmoddi4+0x64>
 800094a:	4608      	mov	r0, r1
 800094c:	e706      	b.n	800075c <__udivmoddi4+0x94>
 800094e:	45c8      	cmp	r8, r9
 8000950:	d2ae      	bcs.n	80008b0 <__udivmoddi4+0x1e8>
 8000952:	ebb9 0e02 	subs.w	lr, r9, r2
 8000956:	eb63 0c07 	sbc.w	ip, r3, r7
 800095a:	3801      	subs	r0, #1
 800095c:	e7a8      	b.n	80008b0 <__udivmoddi4+0x1e8>
 800095e:	4631      	mov	r1, r6
 8000960:	e7ed      	b.n	800093e <__udivmoddi4+0x276>
 8000962:	4603      	mov	r3, r0
 8000964:	e799      	b.n	800089a <__udivmoddi4+0x1d2>
 8000966:	4630      	mov	r0, r6
 8000968:	e7d4      	b.n	8000914 <__udivmoddi4+0x24c>
 800096a:	46d6      	mov	lr, sl
 800096c:	e77f      	b.n	800086e <__udivmoddi4+0x1a6>
 800096e:	4463      	add	r3, ip
 8000970:	3802      	subs	r0, #2
 8000972:	e74d      	b.n	8000810 <__udivmoddi4+0x148>
 8000974:	4606      	mov	r6, r0
 8000976:	4623      	mov	r3, r4
 8000978:	4608      	mov	r0, r1
 800097a:	e70f      	b.n	800079c <__udivmoddi4+0xd4>
 800097c:	3e02      	subs	r6, #2
 800097e:	4463      	add	r3, ip
 8000980:	e730      	b.n	80007e4 <__udivmoddi4+0x11c>
 8000982:	bf00      	nop

08000984 <__aeabi_idiv0>:
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <convertBinaryToTemperature>:
#define TX_EN           (1U << 3)
#define RX_EN           (1U << 2)
#define TRANSMISSION_COMPLETE       (1U << 7)
void SystemClock_Config(void);
float convertBinaryToTemperature(uint16_t data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	80fb      	strh	r3, [r7, #6]
	float result;
	// if flagSign = 1 is nagative, flagSign = 0 positive
	int flagSign = 0; 
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	int temp = data >> 11;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	0adb      	lsrs	r3, r3, #11
 800099a:	b29b      	uxth	r3, r3
 800099c:	60fb      	str	r3, [r7, #12]
	if(temp & 0x01)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <convertBinaryToTemperature+0x24>
	{
		flagSign = 1;
 80009a8:	2301      	movs	r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
	}
	temp = (data >> 4) & 0x7F; 
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	091b      	lsrs	r3, r3, #4
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80009b6:	60fb      	str	r3, [r7, #12]
	if(!flagSign)
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d169      	bne.n	8000a92 <convertBinaryToTemperature+0x10a>
	{
		if(data & 0xF)
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	f003 030f 	and.w	r3, r3, #15
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d05e      	beq.n	8000a86 <convertBinaryToTemperature+0xfe>
		{
			switch(data & 0xF)
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	f003 030f 	and.w	r3, r3, #15
 80009ce:	3b01      	subs	r3, #1
 80009d0:	2b07      	cmp	r3, #7
 80009d2:	d85e      	bhi.n	8000a92 <convertBinaryToTemperature+0x10a>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <convertBinaryToTemperature+0x54>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009fd 	.word	0x080009fd
 80009e0:	08000a1f 	.word	0x08000a1f
 80009e4:	08000a93 	.word	0x08000a93
 80009e8:	08000a43 	.word	0x08000a43
 80009ec:	08000a93 	.word	0x08000a93
 80009f0:	08000a93 	.word	0x08000a93
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000a65 	.word	0x08000a65
			{
				case 1:
				{
					result = (temp + 0.0625); 
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fd91 	bl	8000524 <__aeabi_i2d>
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	4b71      	ldr	r3, [pc, #452]	@ (8000bcc <convertBinaryToTemperature+0x244>)
 8000a08:	f7ff fc40 	bl	800028c <__adddf3>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	460b      	mov	r3, r1
 8000a10:	4610      	mov	r0, r2
 8000a12:	4619      	mov	r1, r3
 8000a14:	f7ff fdf0 	bl	80005f8 <__aeabi_d2f>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	617b      	str	r3, [r7, #20]
					break;
 8000a1c:	e039      	b.n	8000a92 <convertBinaryToTemperature+0x10a>
				}
				case 2:
				{
					result = (temp + 0.125);
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fd80 	bl	8000524 <__aeabi_i2d>
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000a2c:	f7ff fc2e 	bl	800028c <__adddf3>
 8000a30:	4602      	mov	r2, r0
 8000a32:	460b      	mov	r3, r1
 8000a34:	4610      	mov	r0, r2
 8000a36:	4619      	mov	r1, r3
 8000a38:	f7ff fdde 	bl	80005f8 <__aeabi_d2f>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	617b      	str	r3, [r7, #20]
					break;
 8000a40:	e027      	b.n	8000a92 <convertBinaryToTemperature+0x10a>
				}
				case 4:
				{
					result = (temp + 0.25);
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fd6e 	bl	8000524 <__aeabi_i2d>
 8000a48:	f04f 0200 	mov.w	r2, #0
 8000a4c:	4b60      	ldr	r3, [pc, #384]	@ (8000bd0 <convertBinaryToTemperature+0x248>)
 8000a4e:	f7ff fc1d 	bl	800028c <__adddf3>
 8000a52:	4602      	mov	r2, r0
 8000a54:	460b      	mov	r3, r1
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fdcd 	bl	80005f8 <__aeabi_d2f>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	617b      	str	r3, [r7, #20]
					break;
 8000a62:	e016      	b.n	8000a92 <convertBinaryToTemperature+0x10a>
				}
				case 8:
				{
					result = (temp + 0.5);
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f7ff fd5d 	bl	8000524 <__aeabi_i2d>
 8000a6a:	f04f 0200 	mov.w	r2, #0
 8000a6e:	4b59      	ldr	r3, [pc, #356]	@ (8000bd4 <convertBinaryToTemperature+0x24c>)
 8000a70:	f7ff fc0c 	bl	800028c <__adddf3>
 8000a74:	4602      	mov	r2, r0
 8000a76:	460b      	mov	r3, r1
 8000a78:	4610      	mov	r0, r2
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f7ff fdbc 	bl	80005f8 <__aeabi_d2f>
 8000a80:	4603      	mov	r3, r0
 8000a82:	617b      	str	r3, [r7, #20]
					break;
 8000a84:	e005      	b.n	8000a92 <convertBinaryToTemperature+0x10a>
				}
			}
		}
		else 
		{
			return temp;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	ee07 3a90 	vmov	s15, r3
 8000a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a90:	e096      	b.n	8000bc0 <convertBinaryToTemperature+0x238>
		}
	}
	if(flagSign)
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	f000 8091 	beq.w	8000bbc <convertBinaryToTemperature+0x234>
	{
		result = 127 - temp;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000aa0:	ee07 3a90 	vmov	s15, r3
 8000aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa8:	edc7 7a05 	vstr	s15, [r7, #20]
		if(temp < 100)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b63      	cmp	r3, #99	@ 0x63
 8000ab0:	dc07      	bgt.n	8000ac2 <convertBinaryToTemperature+0x13a>
		{
			result +=1;
 8000ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000abe:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		if(data & 0xF)
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	f003 030f 	and.w	r3, r3, #15
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d072      	beq.n	8000bb2 <convertBinaryToTemperature+0x22a>
		{
			switch(data & 0xF)
 8000acc:	88fb      	ldrh	r3, [r7, #6]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	2b07      	cmp	r3, #7
 8000ad6:	d871      	bhi.n	8000bbc <convertBinaryToTemperature+0x234>
 8000ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae0 <convertBinaryToTemperature+0x158>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b01 	.word	0x08000b01
 8000ae4:	08000bbd 	.word	0x08000bbd
 8000ae8:	08000bbd 	.word	0x08000bbd
 8000aec:	08000bbd 	.word	0x08000bbd
 8000af0:	08000b87 	.word	0x08000b87
 8000af4:	08000bbd 	.word	0x08000bbd
 8000af8:	08000b2d 	.word	0x08000b2d
 8000afc:	08000b5b 	.word	0x08000b5b
			{
				case 8:
				{
					result = - (result + 0.5);
 8000b00:	6978      	ldr	r0, [r7, #20]
 8000b02:	f7ff fd21 	bl	8000548 <__aeabi_f2d>
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <convertBinaryToTemperature+0x24c>)
 8000b0c:	f7ff fbbe 	bl	800028c <__adddf3>
 8000b10:	4602      	mov	r2, r0
 8000b12:	460b      	mov	r3, r1
 8000b14:	4610      	mov	r0, r2
 8000b16:	4619      	mov	r1, r3
 8000b18:	f7ff fd6e 	bl	80005f8 <__aeabi_d2f>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	ee07 3a90 	vmov	s15, r3
 8000b22:	eef1 7a67 	vneg.f32	s15, s15
 8000b26:	edc7 7a05 	vstr	s15, [r7, #20]
					break;
 8000b2a:	e047      	b.n	8000bbc <convertBinaryToTemperature+0x234>
				}
				case 0b1110:
				{
					result = - (result + 0.125);
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f7ff fd0b 	bl	8000548 <__aeabi_f2d>
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8000b3a:	f7ff fba7 	bl	800028c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	4610      	mov	r0, r2
 8000b44:	4619      	mov	r1, r3
 8000b46:	f7ff fd57 	bl	80005f8 <__aeabi_d2f>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef1 7a67 	vneg.f32	s15, s15
 8000b54:	edc7 7a05 	vstr	s15, [r7, #20]
					break;
 8000b58:	e030      	b.n	8000bbc <convertBinaryToTemperature+0x234>
				}
				case 0b1111:
				{
					result = - (result + 0.0625);
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff fcf4 	bl	8000548 <__aeabi_f2d>
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <convertBinaryToTemperature+0x244>)
 8000b66:	f7ff fb91 	bl	800028c <__adddf3>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	4610      	mov	r0, r2
 8000b70:	4619      	mov	r1, r3
 8000b72:	f7ff fd41 	bl	80005f8 <__aeabi_d2f>
 8000b76:	4603      	mov	r3, r0
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eef1 7a67 	vneg.f32	s15, s15
 8000b80:	edc7 7a05 	vstr	s15, [r7, #20]
					break;
 8000b84:	e01a      	b.n	8000bbc <convertBinaryToTemperature+0x234>
				}
				case 0b1100:
				{
					result = - (result + 0.25);
 8000b86:	6978      	ldr	r0, [r7, #20]
 8000b88:	f7ff fcde 	bl	8000548 <__aeabi_f2d>
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <convertBinaryToTemperature+0x248>)
 8000b92:	f7ff fb7b 	bl	800028c <__adddf3>
 8000b96:	4602      	mov	r2, r0
 8000b98:	460b      	mov	r3, r1
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f7ff fd2b 	bl	80005f8 <__aeabi_d2f>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eef1 7a67 	vneg.f32	s15, s15
 8000bac:	edc7 7a05 	vstr	s15, [r7, #20]
					break;
 8000bb0:	e004      	b.n	8000bbc <convertBinaryToTemperature+0x234>
				}
			}
		}
		else 
		{
			return -result;
 8000bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bb6:	eef1 7a67 	vneg.f32	s15, s15
 8000bba:	e001      	b.n	8000bc0 <convertBinaryToTemperature+0x238>
		}
	}
	return result;
 8000bbc:	edd7 7a05 	vldr	s15, [r7, #20]
}
 8000bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	3fb00000 	.word	0x3fb00000
 8000bd0:	3fd00000 	.word	0x3fd00000
 8000bd4:	3fe00000 	.word	0x3fe00000

08000bd8 <ds18b20_temp>:

float ds18b20_temp(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint8_t t1,t2;
  uint16_t twoByteTemp;

  onewire_reset();
 8000bde:	f000 f9d7 	bl	8000f90 <onewire_reset>
  // cách này dành cho bus chỉ có 1 ds18b20
  // skip rom command
  onewire_write(0xCC);
 8000be2:	20cc      	movs	r0, #204	@ 0xcc
 8000be4:	f000 fa00 	bl	8000fe8 <onewire_write>
  // convert T [44h]
  onewire_write(0x44);
 8000be8:	2044      	movs	r0, #68	@ 0x44
 8000bea:	f000 f9fd 	bl	8000fe8 <onewire_write>
  // xem xét lại hàm delay này có thể giảm delay
	HAL_Delay(800); 
 8000bee:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000bf2:	f000 fbb5 	bl	8001360 <HAL_Delay>

  // reset bus
	onewire_reset();
 8000bf6:	f000 f9cb 	bl	8000f90 <onewire_reset>
	// skip rom command
	onewire_write(0xCC);
 8000bfa:	20cc      	movs	r0, #204	@ 0xcc
 8000bfc:	f000 f9f4 	bl	8000fe8 <onewire_write>
  // read data from scratchpad
  onewire_write(0xBE);
 8000c00:	20be      	movs	r0, #190	@ 0xbe
 8000c02:	f000 f9f1 	bl	8000fe8 <onewire_write>

  t1 = onewire_read();
 8000c06:	f000 fa33 	bl	8001070 <onewire_read>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  t2 = onewire_read();
 8000c0e:	f000 fa2f 	bl	8001070 <onewire_read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	71bb      	strb	r3, [r7, #6]

  twoByteTemp = (t2 << 8) | t1;
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	021b      	lsls	r3, r3, #8
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b21b      	sxth	r3, r3
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	80bb      	strh	r3, [r7, #4]
  float result = convertBinaryToTemperature(twoByteTemp);
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fead 	bl	8000988 <convertBinaryToTemperature>
 8000c2e:	ed87 0a00 	vstr	s0, [r7]
  return result;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	ee07 3a90 	vmov	s15, r3

}
 8000c38:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <uart1_rxtx>:

void uart1_rxtx(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	// 1. enable clock gpioa
	RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 8000c48:	4b2c      	ldr	r3, [pc, #176]	@ (8000cfc <uart1_rxtx+0xb8>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000cfc <uart1_rxtx+0xb8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	@ 0x30
	// 2. set mode alternate for PA9 TX
	GPIOA->MODER &= ~(3U << 18);
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a29      	ldr	r2, [pc, #164]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c5a:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8000c5e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2U << 18);
 8000c60:	4b27      	ldr	r3, [pc, #156]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a26      	ldr	r2, [pc, #152]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c6a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (7U << 4);
 8000c6c:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c70:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c72:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8000c76:	6253      	str	r3, [r2, #36]	@ 0x24

	// 3.set mode alternate for P10 RX
	GPIOA->MODER |= (2U << 20);
 8000c78:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a20      	ldr	r2, [pc, #128]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c82:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (7U << 8);
 8000c84:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c88:	4a1d      	ldr	r2, [pc, #116]	@ (8000d00 <uart1_rxtx+0xbc>)
 8000c8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000c8e:	6253      	str	r3, [r2, #36]	@ 0x24

	// enable clock USART1
	RCC->APB2ENR |= USART1_CLOCK_EN;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <uart1_rxtx+0xb8>)
 8000c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <uart1_rxtx+0xb8>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6453      	str	r3, [r2, #68]	@ 0x44

	// config baudrate 115200
	// chose oversampling 16
	USART1->CR1 &= ~ (1U << 15);
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000ca2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ca6:	60d3      	str	r3, [r2, #12]
	USART1->BRR |= (8U << 4) | (11U << 0);
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	4a15      	ldr	r2, [pc, #84]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cae:	f043 038b 	orr.w	r3, r3, #139	@ 0x8b
 8000cb2:	6093      	str	r3, [r2, #8]

	//configure 1 bit start, 8 bit data, 1 stop bit
	USART1->CR1 &= ~(1U << 12);
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	4a12      	ldr	r2, [pc, #72]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000cbe:	60d3      	str	r3, [r2, #12]
	USART1->CR2 &= ~(3U << 12);
 8000cc0:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cca:	6113      	str	r3, [r2, #16]

	// enable transmit data
	USART1->CR1 |= TX_EN;
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	60d3      	str	r3, [r2, #12]
	// enable receive data
	USART1->CR1 |= RX_EN;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	60d3      	str	r3, [r2, #12]
	__NVIC_EnableIRQ(USART1_position);
	initStructData(&_data);
	#endif

	// enable USART1
	USART1->CR1 |= USART1_EN;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <uart1_rxtx+0xc0>)
 8000cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cee:	60d3      	str	r3, [r2, #12]

}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40011000 	.word	0x40011000

08000d08 <tranmissionEachByte>:
static void tranmissionEachByte(char *str)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
    while(*str)
 8000d10:	e00c      	b.n	8000d2c <tranmissionEachByte+0x24>
    {
        USART1->DR = (*str++) & 0xFF;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	607a      	str	r2, [r7, #4]
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <tranmissionEachByte+0x3c>)
 8000d1c:	605a      	str	r2, [r3, #4]
        while(!(USART1->SR & TRANSMISSION_COMPLETE));
 8000d1e:	bf00      	nop
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <tranmissionEachByte+0x3c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f9      	beq.n	8000d20 <tranmissionEachByte+0x18>
    while(*str)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1ee      	bne.n	8000d12 <tranmissionEachByte+0xa>
    }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40011000 	.word	0x40011000

08000d48 <myPrintf>:
void myPrintf(const char *fmt,...)
{
 8000d48:	b40f      	push	{r0, r1, r2, r3}
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b0c2      	sub	sp, #264	@ 0x108
 8000d4e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start(arg,fmt);
 8000d50:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8000d54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  char buffer[256];
  vsnprintf(buffer,sizeof(buffer),fmt,arg);
 8000d58:	1d38      	adds	r0, r7, #4
 8000d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000d5e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000d62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d66:	f001 f891 	bl	8001e8c <vsniprintf>
  tranmissionEachByte(buffer);
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffcb 	bl	8000d08 <tranmissionEachByte>
  va_end(arg);
}
 8000d72:	bf00      	nop
 8000d74:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d7e:	b004      	add	sp, #16
 8000d80:	4770      	bx	lr
	...

08000d84 <main>:

int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0

  HAL_Init();
 8000d8a:	f000 fa77 	bl	800127c <HAL_Init>
  SystemClock_Config();
 8000d8e:	f000 f817 	bl	8000dc0 <SystemClock_Config>
  float temperature;
  uart1_rxtx();
 8000d92:	f7ff ff57 	bl	8000c44 <uart1_rxtx>
  delay_us_dwt_init();
 8000d96:	f000 f879 	bl	8000e8c <delay_us_dwt_init>
	onewire_reset();
 8000d9a:	f000 f8f9 	bl	8000f90 <onewire_reset>

  while (1)
  {
    temperature = ds18b20_temp();
 8000d9e:	f7ff ff1b 	bl	8000bd8 <ds18b20_temp>
 8000da2:	ed87 0a01 	vstr	s0, [r7, #4]
		myPrintf("temperature: %f\n",temperature);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fbce 	bl	8000548 <__aeabi_f2d>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <main+0x38>)
 8000db2:	f7ff ffc9 	bl	8000d48 <myPrintf>
    temperature = ds18b20_temp();
 8000db6:	bf00      	nop
 8000db8:	e7f1      	b.n	8000d9e <main+0x1a>
 8000dba:	bf00      	nop
 8000dbc:	080027c0 	.word	0x080027c0

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	@ 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	@ 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 f86a 	bl	8001ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <SystemClock_Config+0xb8>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <SystemClock_Config+0xbc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <SystemClock_Config+0xbc>)
 8000e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <SystemClock_Config+0xbc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e20:	2302      	movs	r3, #2
 8000e22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fbcd 	bl	80015d4 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e40:	f000 f81e 	bl	8000e80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fe30 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e6a:	f000 f809 	bl	8000e80 <Error_Handler>
  }
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	@ 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40007000 	.word	0x40007000

08000e80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e84:	b672      	cpsid	i
}
 8000e86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <Error_Handler+0x8>

08000e8c <delay_us_dwt_init>:
#include <core_cm4.h>

static uint32_t cycle_per_microsecond = 0;

void delay_us_dwt_init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    // set bit 1 << 24 trong thanh ghi DEMCR
	// enable trace and debug feature
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <delay_us_dwt_init+0x40>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <delay_us_dwt_init+0x40>)
 8000e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e9a:	60d3      	str	r3, [r2, #12]
    // enable DWT cycle counter
	// DWT (Data Watch point and Trace)
    DWT->CTRL |= DWT_CTRL_CPIEVTENA_Msk;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <delay_us_dwt_init+0x44>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <delay_us_dwt_init+0x44>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea6:	6013      	str	r3, [r2, #0]
    cycle_per_microsecond = HAL_RCC_GetHCLKFreq()/1000000;
 8000ea8:	f000 ffb8 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a09      	ldr	r2, [pc, #36]	@ (8000ed4 <delay_us_dwt_init+0x48>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	0c9b      	lsrs	r3, r3, #18
 8000eb6:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <delay_us_dwt_init+0x4c>)
 8000eb8:	6013      	str	r3, [r2, #0]
    // enable clock gpioa
    RCC->AHB1ENR |= GPIOA_CLOCK_EN;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <delay_us_dwt_init+0x50>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <delay_us_dwt_init+0x50>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000edf0 	.word	0xe000edf0
 8000ed0:	e0001000 	.word	0xe0001000
 8000ed4:	431bde83 	.word	0x431bde83
 8000ed8:	20000078 	.word	0x20000078
 8000edc:	40023800 	.word	0x40023800

08000ee0 <delay_us>:

void delay_us(uint32_t us)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    DWT->CYCCNT = 0;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <delay_us+0x30>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT <= cycle_per_microsecond*us);
 8000eee:	bf00      	nop
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <delay_us+0x30>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4b07      	ldr	r3, [pc, #28]	@ (8000f14 <delay_us+0x34>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	fb01 f303 	mul.w	r3, r1, r3
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d9f6      	bls.n	8000ef0 <delay_us+0x10>
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e0001000 	.word	0xe0001000
 8000f14:	20000078 	.word	0x20000078

08000f18 <outputPin>:
{
    delay_us(1000*ms);
}

void outputPin(GPIO_TypeDef *GPIOx, uint16_t pin_number)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	807b      	strh	r3, [r7, #2]
    GPIOx->MODER &= ~ (0xF << 2*pin_number);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	0052      	lsls	r2, r2, #1
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f32:	43d2      	mvns	r2, r2
 8000f34:	401a      	ands	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (1U << 2*pin_number);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	fa01 f303 	lsl.w	r3, r1, r3
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <inputPin>:

void inputPin(GPIO_TypeDef *GPIOx, uint16_t pin_number)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
    GPIOx->MODER &= ~ (0xF << 2*pin_number);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	210f      	movs	r1, #15
 8000f70:	fa01 f202 	lsl.w	r2, r1, r2
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	601a      	str	r2, [r3, #0]
    GPIOx->MODER |= (0b00 << 2*pin_number);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <onewire_reset>:



uint8_t onewire_reset(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
    uint8_t sensorOk = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	71fb      	strb	r3, [r7, #7]
    // kéo bus xuống mức thấp trong thời gian 480us để tạo reset trên bus
    outputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	4811      	ldr	r0, [pc, #68]	@ (8000fe4 <onewire_reset+0x54>)
 8000f9e:	f7ff ffbb 	bl	8000f18 <outputPin>
    HAL_GPIO_WritePin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN,GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	480f      	ldr	r0, [pc, #60]	@ (8000fe4 <onewire_reset+0x54>)
 8000fa8:	f000 fafb 	bl	80015a2 <HAL_GPIO_WritePin>
    delay_us(480);
 8000fac:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000fb0:	f7ff ff96 	bl	8000ee0 <delay_us>

    // sau khi kéo xuống thấp 480us ds18b20 sẽ đợi 15-60us 
	// chuyển sang input để ngưng trạng thái kéo xuông
    inputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	480b      	ldr	r0, [pc, #44]	@ (8000fe4 <onewire_reset+0x54>)
 8000fb8:	f7ff ffcf 	bl	8000f5a <inputPin>
    delay_us(60);
 8000fbc:	203c      	movs	r0, #60	@ 0x3c
 8000fbe:	f7ff ff8f 	bl	8000ee0 <delay_us>
    /*
	sau khoảng thời gian này ds18b20 sẽ phát 1 xung gọi là "presence" bằng  cách 	
	kéo bus xuống thấp trong khoảng từ 60us đến 240us. để báo với master biết là nó 
	đã sẵn sàng để nhận dữ liệu.
	*/
    if(HAL_GPIO_ReadPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN) == GPIO_PIN_RESET)
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <onewire_reset+0x54>)
 8000fc6:	f000 fad4 	bl	8001572 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <onewire_reset+0x44>
    {
        sensorOk = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	71fb      	strb	r3, [r7, #7]
    }
    delay_us(240);
 8000fd4:	20f0      	movs	r0, #240	@ 0xf0
 8000fd6:	f7ff ff83 	bl	8000ee0 <delay_us>
    return sensorOk;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <onewire_write>:

void onewire_write(uint8_t data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	e031      	b.n	800105c <onewire_write+0x74>
    {
        if(data & (1 << i))
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	fa42 f303 	asr.w	r3, r2, r3
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <onewire_write+0x48>
        {
            /**
             * Để ghi 1 vào ds18b20 phải kéo xuống trong khoảng thời gian dưới 15us
             */
            outputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001008:	2102      	movs	r1, #2
 800100a:	4818      	ldr	r0, [pc, #96]	@ (800106c <onewire_write+0x84>)
 800100c:	f7ff ff84 	bl	8000f18 <outputPin>
            HAL_GPIO_WritePin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2102      	movs	r1, #2
 8001014:	4815      	ldr	r0, [pc, #84]	@ (800106c <onewire_write+0x84>)
 8001016:	f000 fac4 	bl	80015a2 <HAL_GPIO_WritePin>
            delay_us(8);
 800101a:	2008      	movs	r0, #8
 800101c:	f7ff ff60 	bl	8000ee0 <delay_us>

            inputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001020:	2102      	movs	r1, #2
 8001022:	4812      	ldr	r0, [pc, #72]	@ (800106c <onewire_write+0x84>)
 8001024:	f7ff ff99 	bl	8000f5a <inputPin>
            delay_us(60);
 8001028:	203c      	movs	r0, #60	@ 0x3c
 800102a:	f7ff ff59 	bl	8000ee0 <delay_us>
 800102e:	e012      	b.n	8001056 <onewire_write+0x6e>
        else
        {
            /**
             * để ghi 0 vào ds18b20 phải kéo xuống và giữ ở mức low là 60us
             */
            outputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001030:	2102      	movs	r1, #2
 8001032:	480e      	ldr	r0, [pc, #56]	@ (800106c <onewire_write+0x84>)
 8001034:	f7ff ff70 	bl	8000f18 <outputPin>
            HAL_GPIO_WritePin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN,GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2102      	movs	r1, #2
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <onewire_write+0x84>)
 800103e:	f000 fab0 	bl	80015a2 <HAL_GPIO_WritePin>
            delay_us(60);
 8001042:	203c      	movs	r0, #60	@ 0x3c
 8001044:	f7ff ff4c 	bl	8000ee0 <delay_us>

            inputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001048:	2102      	movs	r1, #2
 800104a:	4808      	ldr	r0, [pc, #32]	@ (800106c <onewire_write+0x84>)
 800104c:	f7ff ff85 	bl	8000f5a <inputPin>
            delay_us(8);
 8001050:	2008      	movs	r0, #8
 8001052:	f7ff ff45 	bl	8000ee0 <delay_us>
    for(uint8_t i = 0; i < 8; i++)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b07      	cmp	r3, #7
 8001060:	d9ca      	bls.n	8000ff8 <onewire_write+0x10>

        }
    }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020000 	.word	0x40020000

08001070 <onewire_read>:
	hàm này dùng để đọc các 8 bit data liên tục từ ds18b20 
	
*/

uint8_t onewire_read(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	71bb      	strb	r3, [r7, #6]
 800107e:	e029      	b.n	80010d4 <onewire_read+0x64>
    {
        outputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001080:	2102      	movs	r1, #2
 8001082:	4818      	ldr	r0, [pc, #96]	@ (80010e4 <onewire_read+0x74>)
 8001084:	f7ff ff48 	bl	8000f18 <outputPin>
        HAL_GPIO_WritePin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN,GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2102      	movs	r1, #2
 800108c:	4815      	ldr	r0, [pc, #84]	@ (80010e4 <onewire_read+0x74>)
 800108e:	f000 fa88 	bl	80015a2 <HAL_GPIO_WritePin>
        delay_us(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f7ff ff24 	bl	8000ee0 <delay_us>

        inputPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN);
 8001098:	2102      	movs	r1, #2
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <onewire_read+0x74>)
 800109c:	f7ff ff5d 	bl	8000f5a <inputPin>
        delay_us(3);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f7ff ff1d 	bl	8000ee0 <delay_us>
        if(HAL_GPIO_ReadPin(ONEWIRE_GPIO_PORT,ONEWIRE_PIN) == GPIO_PIN_SET)
 80010a6:	2102      	movs	r1, #2
 80010a8:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <onewire_read+0x74>)
 80010aa:	f000 fa62 	bl	8001572 <HAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d109      	bne.n	80010c8 <onewire_read+0x58>
        {
            data |= (1 << i);
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	2201      	movs	r2, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	b25a      	sxtb	r2, r3
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b25b      	sxtb	r3, r3
 80010c6:	71fb      	strb	r3, [r7, #7]
        }
        delay_us(60);
 80010c8:	203c      	movs	r0, #60	@ 0x3c
 80010ca:	f7ff ff09 	bl	8000ee0 <delay_us>
    for(uint8_t i = 0; i < 8; i++)
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	3301      	adds	r3, #1
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d9d2      	bls.n	8001080 <onewire_read+0x10>
    }
    return data;
 80010da:	79fb      	ldrb	r3, [r7, #7]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <HAL_MspInit+0x4c>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001134 <HAL_MspInit+0x4c>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_MspInit+0x4c>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	4a08      	ldr	r2, [pc, #32]	@ (8001134 <HAL_MspInit+0x4c>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001118:	6413      	str	r3, [r2, #64]	@ 0x40
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_MspInit+0x4c>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <NMI_Handler+0x4>

08001140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <MemManage_Handler+0x4>

08001150 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <UsageFault_Handler+0x4>

08001160 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118e:	f000 f8c7 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	@ (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f000 fe76 	bl	8001eb8 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	@ (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20018000 	.word	0x20018000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	2000007c 	.word	0x2000007c
 8001200:	200001d0 	.word	0x200001d0

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800122c:	f7ff ffea 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	@ (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	@ (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001256:	f000 fe35 	bl	8001ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fd93 	bl	8000d84 <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800126c:	08002828 	.word	0x08002828
  ldr r2, =_sbss
 8001270:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001274:	200001cc 	.word	0x200001cc

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f931 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff ff1a 	bl	80010e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f93b 	bl	800155a <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f911 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000080 	.word	0x20000080

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000080 	.word	0x20000080

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff47 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001534:	f7ff ff5c 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	68b9      	ldr	r1, [r7, #8]
 800153e:	6978      	ldr	r0, [r7, #20]
 8001540:	f7ff ff8e 	bl	8001460 <NVIC_EncodePriority>
 8001544:	4602      	mov	r2, r0
 8001546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff5d 	bl	800140c <__NVIC_SetPriority>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ffb0 	bl	80014c8 <SysTick_Config>
 8001568:	4603      	mov	r3, r0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4013      	ands	r3, r2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	460b      	mov	r3, r1
 80015ac:	807b      	strh	r3, [r7, #2]
 80015ae:	4613      	mov	r3, r2
 80015b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b2:	787b      	ldrb	r3, [r7, #1]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b8:	887a      	ldrh	r2, [r7, #2]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	041a      	lsls	r2, r3, #16
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e267      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d075      	beq.n	80016de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001606:	2b08      	cmp	r3, #8
 8001608:	d112      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b82      	ldr	r3, [pc, #520]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001612:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4b7e      	ldr	r3, [pc, #504]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d05b      	beq.n	80016dc <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d157      	bne.n	80016dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e242      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001638:	d106      	bne.n	8001648 <HAL_RCC_OscConfig+0x74>
 800163a:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b70      	ldr	r3, [pc, #448]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6f      	ldr	r2, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6c      	ldr	r2, [pc, #432]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xb0>
 800166c:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b66      	ldr	r3, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fe5c 	bl	8001348 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fe58 	bl	8001348 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e207      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xc0>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fe48 	bl	8001348 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff fe44 	bl	8001348 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	@ 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1f3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b51      	ldr	r3, [pc, #324]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0xe8>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f6:	4b47      	ldr	r3, [pc, #284]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b44      	ldr	r3, [pc, #272]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b41      	ldr	r3, [pc, #260]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c7      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3b      	ldr	r3, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4937      	ldr	r1, [pc, #220]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174a:	f7ff fdfd 	bl	8001348 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7ff fdf9 	bl	8001348 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a8      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b28      	ldr	r3, [pc, #160]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4925      	ldr	r1, [pc, #148]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b24      	ldr	r3, [pc, #144]	@ (8001818 <HAL_RCC_OscConfig+0x244>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fddc 	bl	8001348 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fdd8 	bl	8001348 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e187      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d036      	beq.n	800182c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d016      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fdbc 	bl	8001348 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fdb8 	bl	8001348 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e167      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_OscConfig+0x240>)
 80017e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x200>
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f4:	4b09      	ldr	r3, [pc, #36]	@ (800181c <HAL_RCC_OscConfig+0x248>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7ff fda5 	bl	8001348 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	e00e      	b.n	8001820 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001802:	f7ff fda1 	bl	8001348 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d907      	bls.n	8001820 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e150      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001814:	40023800 	.word	0x40023800
 8001818:	42470000 	.word	0x42470000
 800181c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	4b88      	ldr	r3, [pc, #544]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ea      	bne.n	8001802 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8097 	beq.w	8001968 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b81      	ldr	r3, [pc, #516]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a7c      	ldr	r2, [pc, #496]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001866:	2301      	movs	r3, #1
 8001868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b77      	ldr	r3, [pc, #476]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d118      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	4b74      	ldr	r3, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a73      	ldr	r2, [pc, #460]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001882:	f7ff fd61 	bl	8001348 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fd5d 	bl	8001348 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e10c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189c:	4b6a      	ldr	r3, [pc, #424]	@ (8001a48 <HAL_RCC_OscConfig+0x474>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d106      	bne.n	80018be <HAL_RCC_OscConfig+0x2ea>
 80018b0:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b4:	4a63      	ldr	r2, [pc, #396]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x30c>
 80018c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x324>
 80018e0:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e4:	4a57      	ldr	r2, [pc, #348]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ec:	4b55      	ldr	r3, [pc, #340]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f0:	4a54      	ldr	r2, [pc, #336]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0304 	bic.w	r3, r3, #4
 80018f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d015      	beq.n	800192c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fd22 	bl	8001348 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001906:	e00a      	b.n	800191e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001908:	f7ff fd1e 	bl	8001348 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e0cb      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0ee      	beq.n	8001908 <HAL_RCC_OscConfig+0x334>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192c:	f7ff fd0c 	bl	8001348 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7ff fd08 	bl	8001348 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001942:	4293      	cmp	r3, r2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e0b5      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ee      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001956:	7dfb      	ldrb	r3, [r7, #23]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b39      	ldr	r3, [pc, #228]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a1 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001972:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d05c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d141      	bne.n	8001a0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b31      	ldr	r3, [pc, #196]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fcdc 	bl	8001348 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff fcd8 	bl	8001348 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e087      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b27      	ldr	r3, [pc, #156]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	019b      	lsls	r3, r3, #6
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	085b      	lsrs	r3, r3, #1
 80019ca:	3b01      	subs	r3, #1
 80019cc:	041b      	lsls	r3, r3, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	061b      	lsls	r3, r3, #24
 80019d6:	491b      	ldr	r1, [pc, #108]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff fcb1 	bl	8001348 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff fcad 	bl	8001348 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e05c      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fc:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0f0      	beq.n	80019ea <HAL_RCC_OscConfig+0x416>
 8001a08:	e054      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <HAL_RCC_OscConfig+0x478>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff fc9a 	bl	8001348 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fc96 	bl	8001348 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e045      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_RCC_OscConfig+0x470>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
 8001a36:	e03d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e038      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d028      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d121      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d11a      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d111      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a96:	085b      	lsrs	r3, r3, #1
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0cc      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d90c      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b63      	ldr	r3, [pc, #396]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0b8      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b18:	4b59      	ldr	r3, [pc, #356]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a58      	ldr	r2, [pc, #352]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b30:	4b53      	ldr	r3, [pc, #332]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b3c:	4b50      	ldr	r3, [pc, #320]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	494d      	ldr	r1, [pc, #308]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d044      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	4b47      	ldr	r3, [pc, #284]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d119      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e07f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b82:	4b3f      	ldr	r3, [pc, #252]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	4b3b      	ldr	r3, [pc, #236]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e067      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b37      	ldr	r3, [pc, #220]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4934      	ldr	r1, [pc, #208]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb4:	f7ff fbc8 	bl	8001348 <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff fbc4 	bl	8001348 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e04f      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d20c      	bcs.n	8001c0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_RCC_ClockConfig+0x1b8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e032      	b.n	8001c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4916      	ldr	r1, [pc, #88]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d009      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	490e      	ldr	r1, [pc, #56]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4a:	f000 f821 	bl	8001c90 <HAL_RCC_GetSysClockFreq>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	490a      	ldr	r1, [pc, #40]	@ (8001c84 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	5ccb      	ldrb	r3, [r1, r3]
 8001c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c66:	4b09      	ldr	r3, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fb28 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023c00 	.word	0x40023c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	080027d4 	.word	0x080027d4
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c94:	b090      	sub	sp, #64	@ 0x40
 8001c96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca8:	4b59      	ldr	r3, [pc, #356]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 80a1 	bhi.w	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc2:	e09b      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc4:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cc8:	e09b      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cca:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cce:	e098      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cda:	4b4d      	ldr	r3, [pc, #308]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d028      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	099b      	lsrs	r3, r3, #6
 8001cec:	2200      	movs	r2, #0
 8001cee:	623b      	str	r3, [r7, #32]
 8001cf0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4b47      	ldr	r3, [pc, #284]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cfc:	fb03 f201 	mul.w	r2, r3, r1
 8001d00:	2300      	movs	r3, #0
 8001d02:	fb00 f303 	mul.w	r3, r0, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	4a43      	ldr	r2, [pc, #268]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d10:	460a      	mov	r2, r1
 8001d12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d16:	4413      	add	r3, r2
 8001d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	61fa      	str	r2, [r7, #28]
 8001d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d2a:	f7fe fcb5 	bl	8000698 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d36:	e053      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	099b      	lsrs	r3, r3, #6
 8001d3e:	2200      	movs	r2, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	617a      	str	r2, [r7, #20]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d4a:	f04f 0b00 	mov.w	fp, #0
 8001d4e:	4652      	mov	r2, sl
 8001d50:	465b      	mov	r3, fp
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	0159      	lsls	r1, r3, #5
 8001d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d60:	0150      	lsls	r0, r2, #5
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	ebb2 080a 	subs.w	r8, r2, sl
 8001d6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d82:	ebb2 0408 	subs.w	r4, r2, r8
 8001d86:	eb63 0509 	sbc.w	r5, r3, r9
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	00eb      	lsls	r3, r5, #3
 8001d94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d98:	00e2      	lsls	r2, r4, #3
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	eb14 030a 	adds.w	r3, r4, sl
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	eb45 030b 	adc.w	r3, r5, fp
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db6:	4629      	mov	r1, r5
 8001db8:	028b      	lsls	r3, r1, #10
 8001dba:	4621      	mov	r1, r4
 8001dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	028a      	lsls	r2, r1, #10
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	60fa      	str	r2, [r7, #12]
 8001dd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dd4:	f7fe fc60 	bl	8000698 <__aeabi_uldivmod>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0c1b      	lsrs	r3, r3, #16
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	3301      	adds	r3, #1
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001df0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001dfa:	e002      	b.n	8001e02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3740      	adds	r7, #64	@ 0x40
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	017d7840 	.word	0x017d7840

08001e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000

08001e34 <_vsniprintf_r>:
 8001e34:	b530      	push	{r4, r5, lr}
 8001e36:	4614      	mov	r4, r2
 8001e38:	2c00      	cmp	r4, #0
 8001e3a:	b09b      	sub	sp, #108	@ 0x6c
 8001e3c:	4605      	mov	r5, r0
 8001e3e:	461a      	mov	r2, r3
 8001e40:	da05      	bge.n	8001e4e <_vsniprintf_r+0x1a>
 8001e42:	238b      	movs	r3, #139	@ 0x8b
 8001e44:	6003      	str	r3, [r0, #0]
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	b01b      	add	sp, #108	@ 0x6c
 8001e4c:	bd30      	pop	{r4, r5, pc}
 8001e4e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8001e52:	f8ad 300c 	strh.w	r3, [sp, #12]
 8001e56:	bf14      	ite	ne
 8001e58:	f104 33ff 	addne.w	r3, r4, #4294967295
 8001e5c:	4623      	moveq	r3, r4
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	9305      	str	r3, [sp, #20]
 8001e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e66:	9100      	str	r1, [sp, #0]
 8001e68:	9104      	str	r1, [sp, #16]
 8001e6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8001e6e:	4669      	mov	r1, sp
 8001e70:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001e72:	f000 f9a1 	bl	80021b8 <_svfiprintf_r>
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	bfbc      	itt	lt
 8001e7a:	238b      	movlt	r3, #139	@ 0x8b
 8001e7c:	602b      	strlt	r3, [r5, #0]
 8001e7e:	2c00      	cmp	r4, #0
 8001e80:	d0e3      	beq.n	8001e4a <_vsniprintf_r+0x16>
 8001e82:	9b00      	ldr	r3, [sp, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e7df      	b.n	8001e4a <_vsniprintf_r+0x16>
	...

08001e8c <vsniprintf>:
 8001e8c:	b507      	push	{r0, r1, r2, lr}
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	460a      	mov	r2, r1
 8001e94:	4601      	mov	r1, r0
 8001e96:	4803      	ldr	r0, [pc, #12]	@ (8001ea4 <vsniprintf+0x18>)
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	f7ff ffcb 	bl	8001e34 <_vsniprintf_r>
 8001e9e:	b003      	add	sp, #12
 8001ea0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ea4:	2000000c 	.word	0x2000000c

08001ea8 <memset>:
 8001ea8:	4402      	add	r2, r0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <memset+0xa>
 8001eb0:	4770      	bx	lr
 8001eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb6:	e7f9      	b.n	8001eac <memset+0x4>

08001eb8 <__errno>:
 8001eb8:	4b01      	ldr	r3, [pc, #4]	@ (8001ec0 <__errno+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	2000000c 	.word	0x2000000c

08001ec4 <__libc_init_array>:
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8001efc <__libc_init_array+0x38>)
 8001ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8001f00 <__libc_init_array+0x3c>)
 8001eca:	1b64      	subs	r4, r4, r5
 8001ecc:	10a4      	asrs	r4, r4, #2
 8001ece:	2600      	movs	r6, #0
 8001ed0:	42a6      	cmp	r6, r4
 8001ed2:	d109      	bne.n	8001ee8 <__libc_init_array+0x24>
 8001ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8001f04 <__libc_init_array+0x40>)
 8001ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8001f08 <__libc_init_array+0x44>)
 8001ed8:	f000 fc66 	bl	80027a8 <_init>
 8001edc:	1b64      	subs	r4, r4, r5
 8001ede:	10a4      	asrs	r4, r4, #2
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	42a6      	cmp	r6, r4
 8001ee4:	d105      	bne.n	8001ef2 <__libc_init_array+0x2e>
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
 8001ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eec:	4798      	blx	r3
 8001eee:	3601      	adds	r6, #1
 8001ef0:	e7ee      	b.n	8001ed0 <__libc_init_array+0xc>
 8001ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef6:	4798      	blx	r3
 8001ef8:	3601      	adds	r6, #1
 8001efa:	e7f2      	b.n	8001ee2 <__libc_init_array+0x1e>
 8001efc:	08002820 	.word	0x08002820
 8001f00:	08002820 	.word	0x08002820
 8001f04:	08002820 	.word	0x08002820
 8001f08:	08002824 	.word	0x08002824

08001f0c <__retarget_lock_acquire_recursive>:
 8001f0c:	4770      	bx	lr

08001f0e <__retarget_lock_release_recursive>:
 8001f0e:	4770      	bx	lr

08001f10 <_free_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	4605      	mov	r5, r0
 8001f14:	2900      	cmp	r1, #0
 8001f16:	d041      	beq.n	8001f9c <_free_r+0x8c>
 8001f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f1c:	1f0c      	subs	r4, r1, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bfb8      	it	lt
 8001f22:	18e4      	addlt	r4, r4, r3
 8001f24:	f000 f8e0 	bl	80020e8 <__malloc_lock>
 8001f28:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <_free_r+0x90>)
 8001f2a:	6813      	ldr	r3, [r2, #0]
 8001f2c:	b933      	cbnz	r3, 8001f3c <_free_r+0x2c>
 8001f2e:	6063      	str	r3, [r4, #4]
 8001f30:	6014      	str	r4, [r2, #0]
 8001f32:	4628      	mov	r0, r5
 8001f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f38:	f000 b8dc 	b.w	80020f4 <__malloc_unlock>
 8001f3c:	42a3      	cmp	r3, r4
 8001f3e:	d908      	bls.n	8001f52 <_free_r+0x42>
 8001f40:	6820      	ldr	r0, [r4, #0]
 8001f42:	1821      	adds	r1, r4, r0
 8001f44:	428b      	cmp	r3, r1
 8001f46:	bf01      	itttt	eq
 8001f48:	6819      	ldreq	r1, [r3, #0]
 8001f4a:	685b      	ldreq	r3, [r3, #4]
 8001f4c:	1809      	addeq	r1, r1, r0
 8001f4e:	6021      	streq	r1, [r4, #0]
 8001f50:	e7ed      	b.n	8001f2e <_free_r+0x1e>
 8001f52:	461a      	mov	r2, r3
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b10b      	cbz	r3, 8001f5c <_free_r+0x4c>
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	d9fa      	bls.n	8001f52 <_free_r+0x42>
 8001f5c:	6811      	ldr	r1, [r2, #0]
 8001f5e:	1850      	adds	r0, r2, r1
 8001f60:	42a0      	cmp	r0, r4
 8001f62:	d10b      	bne.n	8001f7c <_free_r+0x6c>
 8001f64:	6820      	ldr	r0, [r4, #0]
 8001f66:	4401      	add	r1, r0
 8001f68:	1850      	adds	r0, r2, r1
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	6011      	str	r1, [r2, #0]
 8001f6e:	d1e0      	bne.n	8001f32 <_free_r+0x22>
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	6053      	str	r3, [r2, #4]
 8001f76:	4408      	add	r0, r1
 8001f78:	6010      	str	r0, [r2, #0]
 8001f7a:	e7da      	b.n	8001f32 <_free_r+0x22>
 8001f7c:	d902      	bls.n	8001f84 <_free_r+0x74>
 8001f7e:	230c      	movs	r3, #12
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	e7d6      	b.n	8001f32 <_free_r+0x22>
 8001f84:	6820      	ldr	r0, [r4, #0]
 8001f86:	1821      	adds	r1, r4, r0
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	bf04      	itt	eq
 8001f8c:	6819      	ldreq	r1, [r3, #0]
 8001f8e:	685b      	ldreq	r3, [r3, #4]
 8001f90:	6063      	str	r3, [r4, #4]
 8001f92:	bf04      	itt	eq
 8001f94:	1809      	addeq	r1, r1, r0
 8001f96:	6021      	streq	r1, [r4, #0]
 8001f98:	6054      	str	r4, [r2, #4]
 8001f9a:	e7ca      	b.n	8001f32 <_free_r+0x22>
 8001f9c:	bd38      	pop	{r3, r4, r5, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200001c8 	.word	0x200001c8

08001fa4 <sbrk_aligned>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8001fe4 <sbrk_aligned+0x40>)
 8001fa8:	460c      	mov	r4, r1
 8001faa:	6831      	ldr	r1, [r6, #0]
 8001fac:	4605      	mov	r5, r0
 8001fae:	b911      	cbnz	r1, 8001fb6 <sbrk_aligned+0x12>
 8001fb0:	f000 fba6 	bl	8002700 <_sbrk_r>
 8001fb4:	6030      	str	r0, [r6, #0]
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f000 fba1 	bl	8002700 <_sbrk_r>
 8001fbe:	1c43      	adds	r3, r0, #1
 8001fc0:	d103      	bne.n	8001fca <sbrk_aligned+0x26>
 8001fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	bd70      	pop	{r4, r5, r6, pc}
 8001fca:	1cc4      	adds	r4, r0, #3
 8001fcc:	f024 0403 	bic.w	r4, r4, #3
 8001fd0:	42a0      	cmp	r0, r4
 8001fd2:	d0f8      	beq.n	8001fc6 <sbrk_aligned+0x22>
 8001fd4:	1a21      	subs	r1, r4, r0
 8001fd6:	4628      	mov	r0, r5
 8001fd8:	f000 fb92 	bl	8002700 <_sbrk_r>
 8001fdc:	3001      	adds	r0, #1
 8001fde:	d1f2      	bne.n	8001fc6 <sbrk_aligned+0x22>
 8001fe0:	e7ef      	b.n	8001fc2 <sbrk_aligned+0x1e>
 8001fe2:	bf00      	nop
 8001fe4:	200001c4 	.word	0x200001c4

08001fe8 <_malloc_r>:
 8001fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fec:	1ccd      	adds	r5, r1, #3
 8001fee:	f025 0503 	bic.w	r5, r5, #3
 8001ff2:	3508      	adds	r5, #8
 8001ff4:	2d0c      	cmp	r5, #12
 8001ff6:	bf38      	it	cc
 8001ff8:	250c      	movcc	r5, #12
 8001ffa:	2d00      	cmp	r5, #0
 8001ffc:	4606      	mov	r6, r0
 8001ffe:	db01      	blt.n	8002004 <_malloc_r+0x1c>
 8002000:	42a9      	cmp	r1, r5
 8002002:	d904      	bls.n	800200e <_malloc_r+0x26>
 8002004:	230c      	movs	r3, #12
 8002006:	6033      	str	r3, [r6, #0]
 8002008:	2000      	movs	r0, #0
 800200a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800200e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80020e4 <_malloc_r+0xfc>
 8002012:	f000 f869 	bl	80020e8 <__malloc_lock>
 8002016:	f8d8 3000 	ldr.w	r3, [r8]
 800201a:	461c      	mov	r4, r3
 800201c:	bb44      	cbnz	r4, 8002070 <_malloc_r+0x88>
 800201e:	4629      	mov	r1, r5
 8002020:	4630      	mov	r0, r6
 8002022:	f7ff ffbf 	bl	8001fa4 <sbrk_aligned>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	4604      	mov	r4, r0
 800202a:	d158      	bne.n	80020de <_malloc_r+0xf6>
 800202c:	f8d8 4000 	ldr.w	r4, [r8]
 8002030:	4627      	mov	r7, r4
 8002032:	2f00      	cmp	r7, #0
 8002034:	d143      	bne.n	80020be <_malloc_r+0xd6>
 8002036:	2c00      	cmp	r4, #0
 8002038:	d04b      	beq.n	80020d2 <_malloc_r+0xea>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	4639      	mov	r1, r7
 800203e:	4630      	mov	r0, r6
 8002040:	eb04 0903 	add.w	r9, r4, r3
 8002044:	f000 fb5c 	bl	8002700 <_sbrk_r>
 8002048:	4581      	cmp	r9, r0
 800204a:	d142      	bne.n	80020d2 <_malloc_r+0xea>
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	1a6d      	subs	r5, r5, r1
 8002050:	4629      	mov	r1, r5
 8002052:	4630      	mov	r0, r6
 8002054:	f7ff ffa6 	bl	8001fa4 <sbrk_aligned>
 8002058:	3001      	adds	r0, #1
 800205a:	d03a      	beq.n	80020d2 <_malloc_r+0xea>
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	442b      	add	r3, r5
 8002060:	6023      	str	r3, [r4, #0]
 8002062:	f8d8 3000 	ldr.w	r3, [r8]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	bb62      	cbnz	r2, 80020c4 <_malloc_r+0xdc>
 800206a:	f8c8 7000 	str.w	r7, [r8]
 800206e:	e00f      	b.n	8002090 <_malloc_r+0xa8>
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	1b52      	subs	r2, r2, r5
 8002074:	d420      	bmi.n	80020b8 <_malloc_r+0xd0>
 8002076:	2a0b      	cmp	r2, #11
 8002078:	d917      	bls.n	80020aa <_malloc_r+0xc2>
 800207a:	1961      	adds	r1, r4, r5
 800207c:	42a3      	cmp	r3, r4
 800207e:	6025      	str	r5, [r4, #0]
 8002080:	bf18      	it	ne
 8002082:	6059      	strne	r1, [r3, #4]
 8002084:	6863      	ldr	r3, [r4, #4]
 8002086:	bf08      	it	eq
 8002088:	f8c8 1000 	streq.w	r1, [r8]
 800208c:	5162      	str	r2, [r4, r5]
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	4630      	mov	r0, r6
 8002092:	f000 f82f 	bl	80020f4 <__malloc_unlock>
 8002096:	f104 000b 	add.w	r0, r4, #11
 800209a:	1d23      	adds	r3, r4, #4
 800209c:	f020 0007 	bic.w	r0, r0, #7
 80020a0:	1ac2      	subs	r2, r0, r3
 80020a2:	bf1c      	itt	ne
 80020a4:	1a1b      	subne	r3, r3, r0
 80020a6:	50a3      	strne	r3, [r4, r2]
 80020a8:	e7af      	b.n	800200a <_malloc_r+0x22>
 80020aa:	6862      	ldr	r2, [r4, #4]
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	bf0c      	ite	eq
 80020b0:	f8c8 2000 	streq.w	r2, [r8]
 80020b4:	605a      	strne	r2, [r3, #4]
 80020b6:	e7eb      	b.n	8002090 <_malloc_r+0xa8>
 80020b8:	4623      	mov	r3, r4
 80020ba:	6864      	ldr	r4, [r4, #4]
 80020bc:	e7ae      	b.n	800201c <_malloc_r+0x34>
 80020be:	463c      	mov	r4, r7
 80020c0:	687f      	ldr	r7, [r7, #4]
 80020c2:	e7b6      	b.n	8002032 <_malloc_r+0x4a>
 80020c4:	461a      	mov	r2, r3
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	42a3      	cmp	r3, r4
 80020ca:	d1fb      	bne.n	80020c4 <_malloc_r+0xdc>
 80020cc:	2300      	movs	r3, #0
 80020ce:	6053      	str	r3, [r2, #4]
 80020d0:	e7de      	b.n	8002090 <_malloc_r+0xa8>
 80020d2:	230c      	movs	r3, #12
 80020d4:	6033      	str	r3, [r6, #0]
 80020d6:	4630      	mov	r0, r6
 80020d8:	f000 f80c 	bl	80020f4 <__malloc_unlock>
 80020dc:	e794      	b.n	8002008 <_malloc_r+0x20>
 80020de:	6005      	str	r5, [r0, #0]
 80020e0:	e7d6      	b.n	8002090 <_malloc_r+0xa8>
 80020e2:	bf00      	nop
 80020e4:	200001c8 	.word	0x200001c8

080020e8 <__malloc_lock>:
 80020e8:	4801      	ldr	r0, [pc, #4]	@ (80020f0 <__malloc_lock+0x8>)
 80020ea:	f7ff bf0f 	b.w	8001f0c <__retarget_lock_acquire_recursive>
 80020ee:	bf00      	nop
 80020f0:	200001c0 	.word	0x200001c0

080020f4 <__malloc_unlock>:
 80020f4:	4801      	ldr	r0, [pc, #4]	@ (80020fc <__malloc_unlock+0x8>)
 80020f6:	f7ff bf0a 	b.w	8001f0e <__retarget_lock_release_recursive>
 80020fa:	bf00      	nop
 80020fc:	200001c0 	.word	0x200001c0

08002100 <__ssputs_r>:
 8002100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002104:	688e      	ldr	r6, [r1, #8]
 8002106:	461f      	mov	r7, r3
 8002108:	42be      	cmp	r6, r7
 800210a:	680b      	ldr	r3, [r1, #0]
 800210c:	4682      	mov	sl, r0
 800210e:	460c      	mov	r4, r1
 8002110:	4690      	mov	r8, r2
 8002112:	d82d      	bhi.n	8002170 <__ssputs_r+0x70>
 8002114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002118:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800211c:	d026      	beq.n	800216c <__ssputs_r+0x6c>
 800211e:	6965      	ldr	r5, [r4, #20]
 8002120:	6909      	ldr	r1, [r1, #16]
 8002122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002126:	eba3 0901 	sub.w	r9, r3, r1
 800212a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800212e:	1c7b      	adds	r3, r7, #1
 8002130:	444b      	add	r3, r9
 8002132:	106d      	asrs	r5, r5, #1
 8002134:	429d      	cmp	r5, r3
 8002136:	bf38      	it	cc
 8002138:	461d      	movcc	r5, r3
 800213a:	0553      	lsls	r3, r2, #21
 800213c:	d527      	bpl.n	800218e <__ssputs_r+0x8e>
 800213e:	4629      	mov	r1, r5
 8002140:	f7ff ff52 	bl	8001fe8 <_malloc_r>
 8002144:	4606      	mov	r6, r0
 8002146:	b360      	cbz	r0, 80021a2 <__ssputs_r+0xa2>
 8002148:	6921      	ldr	r1, [r4, #16]
 800214a:	464a      	mov	r2, r9
 800214c:	f000 fae8 	bl	8002720 <memcpy>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	6126      	str	r6, [r4, #16]
 800215e:	6165      	str	r5, [r4, #20]
 8002160:	444e      	add	r6, r9
 8002162:	eba5 0509 	sub.w	r5, r5, r9
 8002166:	6026      	str	r6, [r4, #0]
 8002168:	60a5      	str	r5, [r4, #8]
 800216a:	463e      	mov	r6, r7
 800216c:	42be      	cmp	r6, r7
 800216e:	d900      	bls.n	8002172 <__ssputs_r+0x72>
 8002170:	463e      	mov	r6, r7
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	4632      	mov	r2, r6
 8002176:	4641      	mov	r1, r8
 8002178:	f000 faa8 	bl	80026cc <memmove>
 800217c:	68a3      	ldr	r3, [r4, #8]
 800217e:	1b9b      	subs	r3, r3, r6
 8002180:	60a3      	str	r3, [r4, #8]
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	4433      	add	r3, r6
 8002186:	6023      	str	r3, [r4, #0]
 8002188:	2000      	movs	r0, #0
 800218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218e:	462a      	mov	r2, r5
 8002190:	f000 fad4 	bl	800273c <_realloc_r>
 8002194:	4606      	mov	r6, r0
 8002196:	2800      	cmp	r0, #0
 8002198:	d1e0      	bne.n	800215c <__ssputs_r+0x5c>
 800219a:	6921      	ldr	r1, [r4, #16]
 800219c:	4650      	mov	r0, sl
 800219e:	f7ff feb7 	bl	8001f10 <_free_r>
 80021a2:	230c      	movs	r3, #12
 80021a4:	f8ca 3000 	str.w	r3, [sl]
 80021a8:	89a3      	ldrh	r3, [r4, #12]
 80021aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ae:	81a3      	strh	r3, [r4, #12]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	e7e9      	b.n	800218a <__ssputs_r+0x8a>
	...

080021b8 <_svfiprintf_r>:
 80021b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021bc:	4698      	mov	r8, r3
 80021be:	898b      	ldrh	r3, [r1, #12]
 80021c0:	061b      	lsls	r3, r3, #24
 80021c2:	b09d      	sub	sp, #116	@ 0x74
 80021c4:	4607      	mov	r7, r0
 80021c6:	460d      	mov	r5, r1
 80021c8:	4614      	mov	r4, r2
 80021ca:	d510      	bpl.n	80021ee <_svfiprintf_r+0x36>
 80021cc:	690b      	ldr	r3, [r1, #16]
 80021ce:	b973      	cbnz	r3, 80021ee <_svfiprintf_r+0x36>
 80021d0:	2140      	movs	r1, #64	@ 0x40
 80021d2:	f7ff ff09 	bl	8001fe8 <_malloc_r>
 80021d6:	6028      	str	r0, [r5, #0]
 80021d8:	6128      	str	r0, [r5, #16]
 80021da:	b930      	cbnz	r0, 80021ea <_svfiprintf_r+0x32>
 80021dc:	230c      	movs	r3, #12
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	b01d      	add	sp, #116	@ 0x74
 80021e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021ea:	2340      	movs	r3, #64	@ 0x40
 80021ec:	616b      	str	r3, [r5, #20]
 80021ee:	2300      	movs	r3, #0
 80021f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80021f2:	2320      	movs	r3, #32
 80021f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80021f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80021fc:	2330      	movs	r3, #48	@ 0x30
 80021fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800239c <_svfiprintf_r+0x1e4>
 8002202:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002206:	f04f 0901 	mov.w	r9, #1
 800220a:	4623      	mov	r3, r4
 800220c:	469a      	mov	sl, r3
 800220e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002212:	b10a      	cbz	r2, 8002218 <_svfiprintf_r+0x60>
 8002214:	2a25      	cmp	r2, #37	@ 0x25
 8002216:	d1f9      	bne.n	800220c <_svfiprintf_r+0x54>
 8002218:	ebba 0b04 	subs.w	fp, sl, r4
 800221c:	d00b      	beq.n	8002236 <_svfiprintf_r+0x7e>
 800221e:	465b      	mov	r3, fp
 8002220:	4622      	mov	r2, r4
 8002222:	4629      	mov	r1, r5
 8002224:	4638      	mov	r0, r7
 8002226:	f7ff ff6b 	bl	8002100 <__ssputs_r>
 800222a:	3001      	adds	r0, #1
 800222c:	f000 80a7 	beq.w	800237e <_svfiprintf_r+0x1c6>
 8002230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002232:	445a      	add	r2, fp
 8002234:	9209      	str	r2, [sp, #36]	@ 0x24
 8002236:	f89a 3000 	ldrb.w	r3, [sl]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 809f 	beq.w	800237e <_svfiprintf_r+0x1c6>
 8002240:	2300      	movs	r3, #0
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800224a:	f10a 0a01 	add.w	sl, sl, #1
 800224e:	9304      	str	r3, [sp, #16]
 8002250:	9307      	str	r3, [sp, #28]
 8002252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002256:	931a      	str	r3, [sp, #104]	@ 0x68
 8002258:	4654      	mov	r4, sl
 800225a:	2205      	movs	r2, #5
 800225c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002260:	484e      	ldr	r0, [pc, #312]	@ (800239c <_svfiprintf_r+0x1e4>)
 8002262:	f7fd ffbd 	bl	80001e0 <memchr>
 8002266:	9a04      	ldr	r2, [sp, #16]
 8002268:	b9d8      	cbnz	r0, 80022a2 <_svfiprintf_r+0xea>
 800226a:	06d0      	lsls	r0, r2, #27
 800226c:	bf44      	itt	mi
 800226e:	2320      	movmi	r3, #32
 8002270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002274:	0711      	lsls	r1, r2, #28
 8002276:	bf44      	itt	mi
 8002278:	232b      	movmi	r3, #43	@ 0x2b
 800227a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800227e:	f89a 3000 	ldrb.w	r3, [sl]
 8002282:	2b2a      	cmp	r3, #42	@ 0x2a
 8002284:	d015      	beq.n	80022b2 <_svfiprintf_r+0xfa>
 8002286:	9a07      	ldr	r2, [sp, #28]
 8002288:	4654      	mov	r4, sl
 800228a:	2000      	movs	r0, #0
 800228c:	f04f 0c0a 	mov.w	ip, #10
 8002290:	4621      	mov	r1, r4
 8002292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002296:	3b30      	subs	r3, #48	@ 0x30
 8002298:	2b09      	cmp	r3, #9
 800229a:	d94b      	bls.n	8002334 <_svfiprintf_r+0x17c>
 800229c:	b1b0      	cbz	r0, 80022cc <_svfiprintf_r+0x114>
 800229e:	9207      	str	r2, [sp, #28]
 80022a0:	e014      	b.n	80022cc <_svfiprintf_r+0x114>
 80022a2:	eba0 0308 	sub.w	r3, r0, r8
 80022a6:	fa09 f303 	lsl.w	r3, r9, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	9304      	str	r3, [sp, #16]
 80022ae:	46a2      	mov	sl, r4
 80022b0:	e7d2      	b.n	8002258 <_svfiprintf_r+0xa0>
 80022b2:	9b03      	ldr	r3, [sp, #12]
 80022b4:	1d19      	adds	r1, r3, #4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	9103      	str	r1, [sp, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	bfbb      	ittet	lt
 80022be:	425b      	neglt	r3, r3
 80022c0:	f042 0202 	orrlt.w	r2, r2, #2
 80022c4:	9307      	strge	r3, [sp, #28]
 80022c6:	9307      	strlt	r3, [sp, #28]
 80022c8:	bfb8      	it	lt
 80022ca:	9204      	strlt	r2, [sp, #16]
 80022cc:	7823      	ldrb	r3, [r4, #0]
 80022ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80022d0:	d10a      	bne.n	80022e8 <_svfiprintf_r+0x130>
 80022d2:	7863      	ldrb	r3, [r4, #1]
 80022d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80022d6:	d132      	bne.n	800233e <_svfiprintf_r+0x186>
 80022d8:	9b03      	ldr	r3, [sp, #12]
 80022da:	1d1a      	adds	r2, r3, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	9203      	str	r2, [sp, #12]
 80022e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022e4:	3402      	adds	r4, #2
 80022e6:	9305      	str	r3, [sp, #20]
 80022e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80023ac <_svfiprintf_r+0x1f4>
 80022ec:	7821      	ldrb	r1, [r4, #0]
 80022ee:	2203      	movs	r2, #3
 80022f0:	4650      	mov	r0, sl
 80022f2:	f7fd ff75 	bl	80001e0 <memchr>
 80022f6:	b138      	cbz	r0, 8002308 <_svfiprintf_r+0x150>
 80022f8:	9b04      	ldr	r3, [sp, #16]
 80022fa:	eba0 000a 	sub.w	r0, r0, sl
 80022fe:	2240      	movs	r2, #64	@ 0x40
 8002300:	4082      	lsls	r2, r0
 8002302:	4313      	orrs	r3, r2
 8002304:	3401      	adds	r4, #1
 8002306:	9304      	str	r3, [sp, #16]
 8002308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800230c:	4824      	ldr	r0, [pc, #144]	@ (80023a0 <_svfiprintf_r+0x1e8>)
 800230e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002312:	2206      	movs	r2, #6
 8002314:	f7fd ff64 	bl	80001e0 <memchr>
 8002318:	2800      	cmp	r0, #0
 800231a:	d036      	beq.n	800238a <_svfiprintf_r+0x1d2>
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <_svfiprintf_r+0x1ec>)
 800231e:	bb1b      	cbnz	r3, 8002368 <_svfiprintf_r+0x1b0>
 8002320:	9b03      	ldr	r3, [sp, #12]
 8002322:	3307      	adds	r3, #7
 8002324:	f023 0307 	bic.w	r3, r3, #7
 8002328:	3308      	adds	r3, #8
 800232a:	9303      	str	r3, [sp, #12]
 800232c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800232e:	4433      	add	r3, r6
 8002330:	9309      	str	r3, [sp, #36]	@ 0x24
 8002332:	e76a      	b.n	800220a <_svfiprintf_r+0x52>
 8002334:	fb0c 3202 	mla	r2, ip, r2, r3
 8002338:	460c      	mov	r4, r1
 800233a:	2001      	movs	r0, #1
 800233c:	e7a8      	b.n	8002290 <_svfiprintf_r+0xd8>
 800233e:	2300      	movs	r3, #0
 8002340:	3401      	adds	r4, #1
 8002342:	9305      	str	r3, [sp, #20]
 8002344:	4619      	mov	r1, r3
 8002346:	f04f 0c0a 	mov.w	ip, #10
 800234a:	4620      	mov	r0, r4
 800234c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002350:	3a30      	subs	r2, #48	@ 0x30
 8002352:	2a09      	cmp	r2, #9
 8002354:	d903      	bls.n	800235e <_svfiprintf_r+0x1a6>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0c6      	beq.n	80022e8 <_svfiprintf_r+0x130>
 800235a:	9105      	str	r1, [sp, #20]
 800235c:	e7c4      	b.n	80022e8 <_svfiprintf_r+0x130>
 800235e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002362:	4604      	mov	r4, r0
 8002364:	2301      	movs	r3, #1
 8002366:	e7f0      	b.n	800234a <_svfiprintf_r+0x192>
 8002368:	ab03      	add	r3, sp, #12
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	462a      	mov	r2, r5
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <_svfiprintf_r+0x1f0>)
 8002370:	a904      	add	r1, sp, #16
 8002372:	4638      	mov	r0, r7
 8002374:	f3af 8000 	nop.w
 8002378:	1c42      	adds	r2, r0, #1
 800237a:	4606      	mov	r6, r0
 800237c:	d1d6      	bne.n	800232c <_svfiprintf_r+0x174>
 800237e:	89ab      	ldrh	r3, [r5, #12]
 8002380:	065b      	lsls	r3, r3, #25
 8002382:	f53f af2d 	bmi.w	80021e0 <_svfiprintf_r+0x28>
 8002386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002388:	e72c      	b.n	80021e4 <_svfiprintf_r+0x2c>
 800238a:	ab03      	add	r3, sp, #12
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	462a      	mov	r2, r5
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <_svfiprintf_r+0x1f0>)
 8002392:	a904      	add	r1, sp, #16
 8002394:	4638      	mov	r0, r7
 8002396:	f000 f879 	bl	800248c <_printf_i>
 800239a:	e7ed      	b.n	8002378 <_svfiprintf_r+0x1c0>
 800239c:	080027e4 	.word	0x080027e4
 80023a0:	080027ee 	.word	0x080027ee
 80023a4:	00000000 	.word	0x00000000
 80023a8:	08002101 	.word	0x08002101
 80023ac:	080027ea 	.word	0x080027ea

080023b0 <_printf_common>:
 80023b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023b4:	4616      	mov	r6, r2
 80023b6:	4698      	mov	r8, r3
 80023b8:	688a      	ldr	r2, [r1, #8]
 80023ba:	690b      	ldr	r3, [r1, #16]
 80023bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	bfb8      	it	lt
 80023c4:	4613      	movlt	r3, r2
 80023c6:	6033      	str	r3, [r6, #0]
 80023c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023cc:	4607      	mov	r7, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	b10a      	cbz	r2, 80023d6 <_printf_common+0x26>
 80023d2:	3301      	adds	r3, #1
 80023d4:	6033      	str	r3, [r6, #0]
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	0699      	lsls	r1, r3, #26
 80023da:	bf42      	ittt	mi
 80023dc:	6833      	ldrmi	r3, [r6, #0]
 80023de:	3302      	addmi	r3, #2
 80023e0:	6033      	strmi	r3, [r6, #0]
 80023e2:	6825      	ldr	r5, [r4, #0]
 80023e4:	f015 0506 	ands.w	r5, r5, #6
 80023e8:	d106      	bne.n	80023f8 <_printf_common+0x48>
 80023ea:	f104 0a19 	add.w	sl, r4, #25
 80023ee:	68e3      	ldr	r3, [r4, #12]
 80023f0:	6832      	ldr	r2, [r6, #0]
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	42ab      	cmp	r3, r5
 80023f6:	dc26      	bgt.n	8002446 <_printf_common+0x96>
 80023f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	3b00      	subs	r3, #0
 8002400:	bf18      	it	ne
 8002402:	2301      	movne	r3, #1
 8002404:	0692      	lsls	r2, r2, #26
 8002406:	d42b      	bmi.n	8002460 <_printf_common+0xb0>
 8002408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800240c:	4641      	mov	r1, r8
 800240e:	4638      	mov	r0, r7
 8002410:	47c8      	blx	r9
 8002412:	3001      	adds	r0, #1
 8002414:	d01e      	beq.n	8002454 <_printf_common+0xa4>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	6922      	ldr	r2, [r4, #16]
 800241a:	f003 0306 	and.w	r3, r3, #6
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf02      	ittt	eq
 8002422:	68e5      	ldreq	r5, [r4, #12]
 8002424:	6833      	ldreq	r3, [r6, #0]
 8002426:	1aed      	subeq	r5, r5, r3
 8002428:	68a3      	ldr	r3, [r4, #8]
 800242a:	bf0c      	ite	eq
 800242c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002430:	2500      	movne	r5, #0
 8002432:	4293      	cmp	r3, r2
 8002434:	bfc4      	itt	gt
 8002436:	1a9b      	subgt	r3, r3, r2
 8002438:	18ed      	addgt	r5, r5, r3
 800243a:	2600      	movs	r6, #0
 800243c:	341a      	adds	r4, #26
 800243e:	42b5      	cmp	r5, r6
 8002440:	d11a      	bne.n	8002478 <_printf_common+0xc8>
 8002442:	2000      	movs	r0, #0
 8002444:	e008      	b.n	8002458 <_printf_common+0xa8>
 8002446:	2301      	movs	r3, #1
 8002448:	4652      	mov	r2, sl
 800244a:	4641      	mov	r1, r8
 800244c:	4638      	mov	r0, r7
 800244e:	47c8      	blx	r9
 8002450:	3001      	adds	r0, #1
 8002452:	d103      	bne.n	800245c <_printf_common+0xac>
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800245c:	3501      	adds	r5, #1
 800245e:	e7c6      	b.n	80023ee <_printf_common+0x3e>
 8002460:	18e1      	adds	r1, r4, r3
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	2030      	movs	r0, #48	@ 0x30
 8002466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800246a:	4422      	add	r2, r4
 800246c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002474:	3302      	adds	r3, #2
 8002476:	e7c7      	b.n	8002408 <_printf_common+0x58>
 8002478:	2301      	movs	r3, #1
 800247a:	4622      	mov	r2, r4
 800247c:	4641      	mov	r1, r8
 800247e:	4638      	mov	r0, r7
 8002480:	47c8      	blx	r9
 8002482:	3001      	adds	r0, #1
 8002484:	d0e6      	beq.n	8002454 <_printf_common+0xa4>
 8002486:	3601      	adds	r6, #1
 8002488:	e7d9      	b.n	800243e <_printf_common+0x8e>
	...

0800248c <_printf_i>:
 800248c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002490:	7e0f      	ldrb	r7, [r1, #24]
 8002492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002494:	2f78      	cmp	r7, #120	@ 0x78
 8002496:	4691      	mov	r9, r2
 8002498:	4680      	mov	r8, r0
 800249a:	460c      	mov	r4, r1
 800249c:	469a      	mov	sl, r3
 800249e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024a2:	d807      	bhi.n	80024b4 <_printf_i+0x28>
 80024a4:	2f62      	cmp	r7, #98	@ 0x62
 80024a6:	d80a      	bhi.n	80024be <_printf_i+0x32>
 80024a8:	2f00      	cmp	r7, #0
 80024aa:	f000 80d2 	beq.w	8002652 <_printf_i+0x1c6>
 80024ae:	2f58      	cmp	r7, #88	@ 0x58
 80024b0:	f000 80b9 	beq.w	8002626 <_printf_i+0x19a>
 80024b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024bc:	e03a      	b.n	8002534 <_printf_i+0xa8>
 80024be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024c2:	2b15      	cmp	r3, #21
 80024c4:	d8f6      	bhi.n	80024b4 <_printf_i+0x28>
 80024c6:	a101      	add	r1, pc, #4	@ (adr r1, 80024cc <_printf_i+0x40>)
 80024c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024cc:	08002525 	.word	0x08002525
 80024d0:	08002539 	.word	0x08002539
 80024d4:	080024b5 	.word	0x080024b5
 80024d8:	080024b5 	.word	0x080024b5
 80024dc:	080024b5 	.word	0x080024b5
 80024e0:	080024b5 	.word	0x080024b5
 80024e4:	08002539 	.word	0x08002539
 80024e8:	080024b5 	.word	0x080024b5
 80024ec:	080024b5 	.word	0x080024b5
 80024f0:	080024b5 	.word	0x080024b5
 80024f4:	080024b5 	.word	0x080024b5
 80024f8:	08002639 	.word	0x08002639
 80024fc:	08002563 	.word	0x08002563
 8002500:	080025f3 	.word	0x080025f3
 8002504:	080024b5 	.word	0x080024b5
 8002508:	080024b5 	.word	0x080024b5
 800250c:	0800265b 	.word	0x0800265b
 8002510:	080024b5 	.word	0x080024b5
 8002514:	08002563 	.word	0x08002563
 8002518:	080024b5 	.word	0x080024b5
 800251c:	080024b5 	.word	0x080024b5
 8002520:	080025fb 	.word	0x080025fb
 8002524:	6833      	ldr	r3, [r6, #0]
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6032      	str	r2, [r6, #0]
 800252c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002534:	2301      	movs	r3, #1
 8002536:	e09d      	b.n	8002674 <_printf_i+0x1e8>
 8002538:	6833      	ldr	r3, [r6, #0]
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	1d19      	adds	r1, r3, #4
 800253e:	6031      	str	r1, [r6, #0]
 8002540:	0606      	lsls	r6, r0, #24
 8002542:	d501      	bpl.n	8002548 <_printf_i+0xbc>
 8002544:	681d      	ldr	r5, [r3, #0]
 8002546:	e003      	b.n	8002550 <_printf_i+0xc4>
 8002548:	0645      	lsls	r5, r0, #25
 800254a:	d5fb      	bpl.n	8002544 <_printf_i+0xb8>
 800254c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002550:	2d00      	cmp	r5, #0
 8002552:	da03      	bge.n	800255c <_printf_i+0xd0>
 8002554:	232d      	movs	r3, #45	@ 0x2d
 8002556:	426d      	negs	r5, r5
 8002558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800255c:	4859      	ldr	r0, [pc, #356]	@ (80026c4 <_printf_i+0x238>)
 800255e:	230a      	movs	r3, #10
 8002560:	e011      	b.n	8002586 <_printf_i+0xfa>
 8002562:	6821      	ldr	r1, [r4, #0]
 8002564:	6833      	ldr	r3, [r6, #0]
 8002566:	0608      	lsls	r0, r1, #24
 8002568:	f853 5b04 	ldr.w	r5, [r3], #4
 800256c:	d402      	bmi.n	8002574 <_printf_i+0xe8>
 800256e:	0649      	lsls	r1, r1, #25
 8002570:	bf48      	it	mi
 8002572:	b2ad      	uxthmi	r5, r5
 8002574:	2f6f      	cmp	r7, #111	@ 0x6f
 8002576:	4853      	ldr	r0, [pc, #332]	@ (80026c4 <_printf_i+0x238>)
 8002578:	6033      	str	r3, [r6, #0]
 800257a:	bf14      	ite	ne
 800257c:	230a      	movne	r3, #10
 800257e:	2308      	moveq	r3, #8
 8002580:	2100      	movs	r1, #0
 8002582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002586:	6866      	ldr	r6, [r4, #4]
 8002588:	60a6      	str	r6, [r4, #8]
 800258a:	2e00      	cmp	r6, #0
 800258c:	bfa2      	ittt	ge
 800258e:	6821      	ldrge	r1, [r4, #0]
 8002590:	f021 0104 	bicge.w	r1, r1, #4
 8002594:	6021      	strge	r1, [r4, #0]
 8002596:	b90d      	cbnz	r5, 800259c <_printf_i+0x110>
 8002598:	2e00      	cmp	r6, #0
 800259a:	d04b      	beq.n	8002634 <_printf_i+0x1a8>
 800259c:	4616      	mov	r6, r2
 800259e:	fbb5 f1f3 	udiv	r1, r5, r3
 80025a2:	fb03 5711 	mls	r7, r3, r1, r5
 80025a6:	5dc7      	ldrb	r7, [r0, r7]
 80025a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025ac:	462f      	mov	r7, r5
 80025ae:	42bb      	cmp	r3, r7
 80025b0:	460d      	mov	r5, r1
 80025b2:	d9f4      	bls.n	800259e <_printf_i+0x112>
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d10b      	bne.n	80025d0 <_printf_i+0x144>
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	07df      	lsls	r7, r3, #31
 80025bc:	d508      	bpl.n	80025d0 <_printf_i+0x144>
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	6861      	ldr	r1, [r4, #4]
 80025c2:	4299      	cmp	r1, r3
 80025c4:	bfde      	ittt	le
 80025c6:	2330      	movle	r3, #48	@ 0x30
 80025c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025d0:	1b92      	subs	r2, r2, r6
 80025d2:	6122      	str	r2, [r4, #16]
 80025d4:	f8cd a000 	str.w	sl, [sp]
 80025d8:	464b      	mov	r3, r9
 80025da:	aa03      	add	r2, sp, #12
 80025dc:	4621      	mov	r1, r4
 80025de:	4640      	mov	r0, r8
 80025e0:	f7ff fee6 	bl	80023b0 <_printf_common>
 80025e4:	3001      	adds	r0, #1
 80025e6:	d14a      	bne.n	800267e <_printf_i+0x1f2>
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	b004      	add	sp, #16
 80025ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	f043 0320 	orr.w	r3, r3, #32
 80025f8:	6023      	str	r3, [r4, #0]
 80025fa:	4833      	ldr	r0, [pc, #204]	@ (80026c8 <_printf_i+0x23c>)
 80025fc:	2778      	movs	r7, #120	@ 0x78
 80025fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	6831      	ldr	r1, [r6, #0]
 8002606:	061f      	lsls	r7, r3, #24
 8002608:	f851 5b04 	ldr.w	r5, [r1], #4
 800260c:	d402      	bmi.n	8002614 <_printf_i+0x188>
 800260e:	065f      	lsls	r7, r3, #25
 8002610:	bf48      	it	mi
 8002612:	b2ad      	uxthmi	r5, r5
 8002614:	6031      	str	r1, [r6, #0]
 8002616:	07d9      	lsls	r1, r3, #31
 8002618:	bf44      	itt	mi
 800261a:	f043 0320 	orrmi.w	r3, r3, #32
 800261e:	6023      	strmi	r3, [r4, #0]
 8002620:	b11d      	cbz	r5, 800262a <_printf_i+0x19e>
 8002622:	2310      	movs	r3, #16
 8002624:	e7ac      	b.n	8002580 <_printf_i+0xf4>
 8002626:	4827      	ldr	r0, [pc, #156]	@ (80026c4 <_printf_i+0x238>)
 8002628:	e7e9      	b.n	80025fe <_printf_i+0x172>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	f023 0320 	bic.w	r3, r3, #32
 8002630:	6023      	str	r3, [r4, #0]
 8002632:	e7f6      	b.n	8002622 <_printf_i+0x196>
 8002634:	4616      	mov	r6, r2
 8002636:	e7bd      	b.n	80025b4 <_printf_i+0x128>
 8002638:	6833      	ldr	r3, [r6, #0]
 800263a:	6825      	ldr	r5, [r4, #0]
 800263c:	6961      	ldr	r1, [r4, #20]
 800263e:	1d18      	adds	r0, r3, #4
 8002640:	6030      	str	r0, [r6, #0]
 8002642:	062e      	lsls	r6, r5, #24
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	d501      	bpl.n	800264c <_printf_i+0x1c0>
 8002648:	6019      	str	r1, [r3, #0]
 800264a:	e002      	b.n	8002652 <_printf_i+0x1c6>
 800264c:	0668      	lsls	r0, r5, #25
 800264e:	d5fb      	bpl.n	8002648 <_printf_i+0x1bc>
 8002650:	8019      	strh	r1, [r3, #0]
 8002652:	2300      	movs	r3, #0
 8002654:	6123      	str	r3, [r4, #16]
 8002656:	4616      	mov	r6, r2
 8002658:	e7bc      	b.n	80025d4 <_printf_i+0x148>
 800265a:	6833      	ldr	r3, [r6, #0]
 800265c:	1d1a      	adds	r2, r3, #4
 800265e:	6032      	str	r2, [r6, #0]
 8002660:	681e      	ldr	r6, [r3, #0]
 8002662:	6862      	ldr	r2, [r4, #4]
 8002664:	2100      	movs	r1, #0
 8002666:	4630      	mov	r0, r6
 8002668:	f7fd fdba 	bl	80001e0 <memchr>
 800266c:	b108      	cbz	r0, 8002672 <_printf_i+0x1e6>
 800266e:	1b80      	subs	r0, r0, r6
 8002670:	6060      	str	r0, [r4, #4]
 8002672:	6863      	ldr	r3, [r4, #4]
 8002674:	6123      	str	r3, [r4, #16]
 8002676:	2300      	movs	r3, #0
 8002678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800267c:	e7aa      	b.n	80025d4 <_printf_i+0x148>
 800267e:	6923      	ldr	r3, [r4, #16]
 8002680:	4632      	mov	r2, r6
 8002682:	4649      	mov	r1, r9
 8002684:	4640      	mov	r0, r8
 8002686:	47d0      	blx	sl
 8002688:	3001      	adds	r0, #1
 800268a:	d0ad      	beq.n	80025e8 <_printf_i+0x15c>
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	079b      	lsls	r3, r3, #30
 8002690:	d413      	bmi.n	80026ba <_printf_i+0x22e>
 8002692:	68e0      	ldr	r0, [r4, #12]
 8002694:	9b03      	ldr	r3, [sp, #12]
 8002696:	4298      	cmp	r0, r3
 8002698:	bfb8      	it	lt
 800269a:	4618      	movlt	r0, r3
 800269c:	e7a6      	b.n	80025ec <_printf_i+0x160>
 800269e:	2301      	movs	r3, #1
 80026a0:	4632      	mov	r2, r6
 80026a2:	4649      	mov	r1, r9
 80026a4:	4640      	mov	r0, r8
 80026a6:	47d0      	blx	sl
 80026a8:	3001      	adds	r0, #1
 80026aa:	d09d      	beq.n	80025e8 <_printf_i+0x15c>
 80026ac:	3501      	adds	r5, #1
 80026ae:	68e3      	ldr	r3, [r4, #12]
 80026b0:	9903      	ldr	r1, [sp, #12]
 80026b2:	1a5b      	subs	r3, r3, r1
 80026b4:	42ab      	cmp	r3, r5
 80026b6:	dcf2      	bgt.n	800269e <_printf_i+0x212>
 80026b8:	e7eb      	b.n	8002692 <_printf_i+0x206>
 80026ba:	2500      	movs	r5, #0
 80026bc:	f104 0619 	add.w	r6, r4, #25
 80026c0:	e7f5      	b.n	80026ae <_printf_i+0x222>
 80026c2:	bf00      	nop
 80026c4:	080027f5 	.word	0x080027f5
 80026c8:	08002806 	.word	0x08002806

080026cc <memmove>:
 80026cc:	4288      	cmp	r0, r1
 80026ce:	b510      	push	{r4, lr}
 80026d0:	eb01 0402 	add.w	r4, r1, r2
 80026d4:	d902      	bls.n	80026dc <memmove+0x10>
 80026d6:	4284      	cmp	r4, r0
 80026d8:	4623      	mov	r3, r4
 80026da:	d807      	bhi.n	80026ec <memmove+0x20>
 80026dc:	1e43      	subs	r3, r0, #1
 80026de:	42a1      	cmp	r1, r4
 80026e0:	d008      	beq.n	80026f4 <memmove+0x28>
 80026e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026ea:	e7f8      	b.n	80026de <memmove+0x12>
 80026ec:	4402      	add	r2, r0
 80026ee:	4601      	mov	r1, r0
 80026f0:	428a      	cmp	r2, r1
 80026f2:	d100      	bne.n	80026f6 <memmove+0x2a>
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026fe:	e7f7      	b.n	80026f0 <memmove+0x24>

08002700 <_sbrk_r>:
 8002700:	b538      	push	{r3, r4, r5, lr}
 8002702:	4d06      	ldr	r5, [pc, #24]	@ (800271c <_sbrk_r+0x1c>)
 8002704:	2300      	movs	r3, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	602b      	str	r3, [r5, #0]
 800270c:	f7fe fd44 	bl	8001198 <_sbrk>
 8002710:	1c43      	adds	r3, r0, #1
 8002712:	d102      	bne.n	800271a <_sbrk_r+0x1a>
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	b103      	cbz	r3, 800271a <_sbrk_r+0x1a>
 8002718:	6023      	str	r3, [r4, #0]
 800271a:	bd38      	pop	{r3, r4, r5, pc}
 800271c:	200001bc 	.word	0x200001bc

08002720 <memcpy>:
 8002720:	440a      	add	r2, r1
 8002722:	4291      	cmp	r1, r2
 8002724:	f100 33ff 	add.w	r3, r0, #4294967295
 8002728:	d100      	bne.n	800272c <memcpy+0xc>
 800272a:	4770      	bx	lr
 800272c:	b510      	push	{r4, lr}
 800272e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002736:	4291      	cmp	r1, r2
 8002738:	d1f9      	bne.n	800272e <memcpy+0xe>
 800273a:	bd10      	pop	{r4, pc}

0800273c <_realloc_r>:
 800273c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002740:	4680      	mov	r8, r0
 8002742:	4615      	mov	r5, r2
 8002744:	460c      	mov	r4, r1
 8002746:	b921      	cbnz	r1, 8002752 <_realloc_r+0x16>
 8002748:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800274c:	4611      	mov	r1, r2
 800274e:	f7ff bc4b 	b.w	8001fe8 <_malloc_r>
 8002752:	b92a      	cbnz	r2, 8002760 <_realloc_r+0x24>
 8002754:	f7ff fbdc 	bl	8001f10 <_free_r>
 8002758:	2400      	movs	r4, #0
 800275a:	4620      	mov	r0, r4
 800275c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002760:	f000 f81a 	bl	8002798 <_malloc_usable_size_r>
 8002764:	4285      	cmp	r5, r0
 8002766:	4606      	mov	r6, r0
 8002768:	d802      	bhi.n	8002770 <_realloc_r+0x34>
 800276a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800276e:	d8f4      	bhi.n	800275a <_realloc_r+0x1e>
 8002770:	4629      	mov	r1, r5
 8002772:	4640      	mov	r0, r8
 8002774:	f7ff fc38 	bl	8001fe8 <_malloc_r>
 8002778:	4607      	mov	r7, r0
 800277a:	2800      	cmp	r0, #0
 800277c:	d0ec      	beq.n	8002758 <_realloc_r+0x1c>
 800277e:	42b5      	cmp	r5, r6
 8002780:	462a      	mov	r2, r5
 8002782:	4621      	mov	r1, r4
 8002784:	bf28      	it	cs
 8002786:	4632      	movcs	r2, r6
 8002788:	f7ff ffca 	bl	8002720 <memcpy>
 800278c:	4621      	mov	r1, r4
 800278e:	4640      	mov	r0, r8
 8002790:	f7ff fbbe 	bl	8001f10 <_free_r>
 8002794:	463c      	mov	r4, r7
 8002796:	e7e0      	b.n	800275a <_realloc_r+0x1e>

08002798 <_malloc_usable_size_r>:
 8002798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800279c:	1f18      	subs	r0, r3, #4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bfbc      	itt	lt
 80027a2:	580b      	ldrlt	r3, [r1, r0]
 80027a4:	18c0      	addlt	r0, r0, r3
 80027a6:	4770      	bx	lr

080027a8 <_init>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr

080027b4 <_fini>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr
